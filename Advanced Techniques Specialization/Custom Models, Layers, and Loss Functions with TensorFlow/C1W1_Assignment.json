{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "ZL_6GK8qX35J"
   },
   "source": [
    "\n",
    "\n",
    "# Week 1: Multiple Output Models using the Keras Functional API\n",
    "\n",
    "Welcome to the first programming assignment of the course! Your task will be to use the Keras functional API to train a model to predict two outputs. For this lab, you will use the **[Wine Quality Dataset](https://archive.ics.uci.edu/ml/datasets/Wine+Quality)** from the **UCI machine learning repository**. It has separate datasets for red wine and white wine.\n",
    "\n",
    "Normally, the wines are classified into one of the quality ratings specified in the attributes. In this exercise, you will combine the two datasets to predict the wine quality and whether the wine is red or white solely from the attributes. \n",
    "\n",
    "You will model wine quality estimations as a regression problem and wine type detection as a binary classification problem.\n",
    "\n",
    "#### Please complete sections that are marked **(TODO)**"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "obdcD6urYBY9"
   },
   "source": [
    "## Imports"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 103,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "t8N3pcTQ5oQI"
   },
   "outputs": [],
   "source": [
    "import tensorflow as tf\n",
    "from tensorflow.keras.models import Model\n",
    "from tensorflow.keras.layers import Dense, Input\n",
    "\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import pandas as pd\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.metrics import confusion_matrix\n",
    "import itertools\n",
    "\n",
    "import utils"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "gQMERzWQYpgm"
   },
   "source": [
    "## Load Dataset\n",
    "\n",
    "\n",
    "You will now load the dataset from the [UCI Machine Learning Repository](https://archive.ics.uci.edu/ml/index.php) which are already saved in your workspace.\n",
    "\n",
    "### Pre-process the white wine dataset (TODO)\n",
    "You will add a new column named `is_red` in your dataframe to indicate if the wine is white or red. \n",
    "- In the white wine dataset, you will fill the column `is_red` with  zeros (0)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 108,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "deletable": false,
    "id": "2qYAjKXCd4RH",
    "nbgrader": {
     "cell_type": "code",
     "checksum": "325ea195519b7035934c95bb529a062c",
     "grade": false,
     "grade_id": "cell-e5bfa0f152d9a21f",
     "locked": false,
     "schema_version": 3,
     "solution": true,
     "task": false
    }
   },
   "outputs": [],
   "source": [
    "## Please uncomment all lines in this cell and replace those marked with `# YOUR CODE HERE`.\n",
    "## You can select all lines in this code cell with Ctrl+A (Windows/Linux) or Cmd+A (Mac), then press Ctrl+/ (Windows/Linux) or Cmd+/ (Mac) to uncomment.\n",
    "\n",
    "\n",
    "\n",
    "# # URL of the white wine dataset\n",
    "URI = './winequality-white.csv'\n",
    "\n",
    "# # load the dataset from the URL\n",
    "white_df = pd.read_csv(URI, sep=\";\")\n",
    "\n",
    "# # fill the `is_red` column with zeros.\n",
    "white_df[\"is_red\"] = np.zeros(white_df.shape[0], dtype=int)\n",
    "\n",
    "# # keep only the first of duplicate items\n",
    "white_df = white_df.drop_duplicates(keep='first')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 109,
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "code",
     "checksum": "defe38d6ec58fd31cd67b89e46c4373f",
     "grade": true,
     "grade_id": "cell-30575e713b55fc51",
     "locked": true,
     "points": 1,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[92m All public tests passed\n"
     ]
    }
   ],
   "source": [
    "# You can click `File -> Open` in the menu above and open the `utils.py` file \n",
    "# in case you want to inspect the unit tests being used for each graded function.\n",
    "\n",
    "utils.test_white_df(white_df)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 110,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "OQHK0ohBQRCk"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "8.8\n",
      "9.1\n"
     ]
    }
   ],
   "source": [
    "print(white_df.alcohol[0])\n",
    "print(white_df.alcohol[100])\n",
    "\n",
    "# EXPECTED OUTPUT\n",
    "# 8.8\n",
    "# 9.1"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Pre-process the red wine dataset (TODO)\n",
    "- In the red wine dataset, you will fill in the column `is_red` with ones (1)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 113,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "deletable": false,
    "id": "8y3QxKwBed8v",
    "nbgrader": {
     "cell_type": "code",
     "checksum": "12e0963d15be33b01b4e6ebc8945e51e",
     "grade": false,
     "grade_id": "cell-e47a40f306593274",
     "locked": false,
     "schema_version": 3,
     "solution": true,
     "task": false
    }
   },
   "outputs": [],
   "source": [
    "# Please uncomment all lines in this cell and replace those marked with `# YOUR CODE HERE`.\n",
    "# You can select all lines in this code cell with Ctrl+A (Windows/Linux) or Cmd+A (Mac), then press Ctrl+/ (Windows/Linux) or Cmd+/ (Mac) to uncomment.\n",
    "\n",
    "\n",
    "\n",
    "# URL of the red wine dataset\n",
    "URI = './winequality-red.csv'\n",
    "\n",
    "# load the dataset from the URL\n",
    "red_df = pd.read_csv(URI, sep=\";\")\n",
    "\n",
    "# fill the `is_red` column with ones.\n",
    "red_df[\"is_red\"] = np.ones(red_df.shape[0], dtype=int)\n",
    "\n",
    "# keep only the first of duplicate items\n",
    "red_df = red_df.drop_duplicates(keep='first')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 114,
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "code",
     "checksum": "d8e0c91b0fd668b63ba74a8f2f958b59",
     "grade": true,
     "grade_id": "cell-2a75937adcc0c25b",
     "locked": true,
     "points": 1,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[92m All public tests passed\n"
     ]
    }
   ],
   "source": [
    "utils.test_red_df(red_df)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 115,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "zsB3LUzNQpo_"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "9.4\n",
      "10.2\n"
     ]
    }
   ],
   "source": [
    "print(red_df.alcohol[0])\n",
    "print(red_df.alcohol[100])\n",
    "\n",
    "# EXPECTED OUTPUT\n",
    "# 9.4\n",
    "# 10.2"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "2G8B-NYuM6-f"
   },
   "source": [
    "### Concatenate the datasets\n",
    "\n",
    "Next, concatenate the red and white wine dataframes."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 116,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "YpQrOjJbfN3m"
   },
   "outputs": [],
   "source": [
    "df = pd.concat([red_df, white_df], ignore_index=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 117,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "Se2dTmThQyjb"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "9.4\n",
      "9.5\n"
     ]
    }
   ],
   "source": [
    "print(df.alcohol[0])\n",
    "print(df.alcohol[100])\n",
    "\n",
    "# EXPECTED OUTPUT\n",
    "# 9.4\n",
    "# 9.5"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In a real-world scenario, you should shuffle the data. For this assignment however, **you are not** going to do that because the grader needs to test with deterministic data. If you want the code to do it **after** you've gotten your grade for this notebook, we left the commented line below for reference"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 118,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "wx6y3rPpQv4k"
   },
   "outputs": [],
   "source": [
    "#df = df.iloc[np.random.permutation(len(df))]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "-EqIcbg5M_n1"
   },
   "source": [
    "This will chart the quality of the wines."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 119,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "IsvK0-Sgy17C"
   },
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "df['quality'].hist(bins=20);"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "Nut1rmYLzf-p"
   },
   "source": [
    "### Imbalanced data (TODO)\n",
    "You can see from the plot above that the wine quality dataset is imbalanced. \n",
    "- Since there are very few observations with quality equal to 3, 4, 8 and 9, you can drop these observations from your dataset. \n",
    "- You can do this by removing data belonging to all classes except those > 4 and < 8."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 120,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "deletable": false,
    "id": "doH9_-gnf3sz",
    "nbgrader": {
     "cell_type": "code",
     "checksum": "d9ba9fc3a3ca02ccc567be33652b80fe",
     "grade": false,
     "grade_id": "cell-6a3e9db696f6827b",
     "locked": false,
     "schema_version": 3,
     "solution": true,
     "task": false
    }
   },
   "outputs": [],
   "source": [
    "# Please uncomment all lines in this cell and replace those marked with `# YOUR CODE HERE`.\n",
    "# You can select all lines in this code cell with Ctrl+A (Windows/Linux) or Cmd+A (Mac), then press Ctrl+/ (Windows/Linux) or Cmd+/ (Mac) to uncomment.\n",
    "\n",
    "\n",
    "\n",
    "# get data with wine quality greater than 4 and less than 8\n",
    "df = df[(df['quality'] > 4) & (df['quality'] < 8 )]\n",
    "\n",
    "# reset index and drop the old one\n",
    "df = df.reset_index(drop=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 121,
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "code",
     "checksum": "281e1d86a4803560ed5892cd7eda4c01",
     "grade": true,
     "grade_id": "cell-aed3da719d4682c7",
     "locked": true,
     "points": 1,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[92m All public tests passed\n"
     ]
    }
   ],
   "source": [
    "utils.test_df_drop(df)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 122,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "xNR1iAlMRPXO"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "9.4\n",
      "10.9\n"
     ]
    }
   ],
   "source": [
    "print(df.alcohol[0])\n",
    "print(df.alcohol[100])\n",
    "\n",
    "# EXPECTED OUTPUT\n",
    "# 9.4\n",
    "# 10.9"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "cwhuRpnVRTzG"
   },
   "source": [
    "You can plot again to see the new range of data and quality"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 123,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "857ygzZiLgGg"
   },
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "df['quality'].hist(bins=20);"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "n3k0vqSsp84t"
   },
   "source": [
    "### Train Test Split (TODO)\n",
    "\n",
    "Next, you can split the datasets into training, test and validation datasets.\n",
    "- The data frame should be split 80:20 into `train` and `test` sets.\n",
    "- The resulting `train` should then be split 80:20 into `train` and `val` sets.\n",
    "- The `train_test_split` parameter `test_size` takes a float value that ranges between 0. and 1, and represents the proportion of the dataset that is allocated to the test set.  The rest of the data is allocated to the training set."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 124,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "deletable": false,
    "id": "PAVIf2-fgRVY",
    "nbgrader": {
     "cell_type": "code",
     "checksum": "7f5738f4fb51d65adc9a8acbdf2b9970",
     "grade": false,
     "grade_id": "cell-91946cadf745206b",
     "locked": false,
     "schema_version": 3,
     "solution": true,
     "task": false
    }
   },
   "outputs": [],
   "source": [
    "# Please uncomment all lines in this cell and replace those marked with `# YOUR CODE HERE`.\n",
    "# You can select all lines in this code cell with Ctrl+A (Windows/Linux) or Cmd+A (Mac), then press Ctrl+/ (Windows/Linux) or Cmd+/ (Mac) to uncomment.\n",
    "\n",
    "\n",
    "\n",
    "# Please do not change the random_state parameter. This is needed for grading.\n",
    "\n",
    "# split df into 80:20 train and test sets\n",
    "train, test = train_test_split(df, test_size=0.2, random_state = 1)\n",
    "                               \n",
    "# split train into 80:20 train and val sets\n",
    "train, val = train_test_split(train, test_size=0.2, random_state = 1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 125,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "deletable": false,
    "editable": false,
    "id": "57h9LcEzRWpk",
    "nbgrader": {
     "cell_type": "code",
     "checksum": "42adbe9e66efac7c7a5f8cd73ac92f22",
     "grade": true,
     "grade_id": "cell-64b8b38cd0b965f6",
     "locked": true,
     "points": 1,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[92m All public tests passed\n"
     ]
    }
   ],
   "source": [
    "utils.test_data_sizes(train.size, test.size, val.size)\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "RwTNu4KFqG-K"
   },
   "source": [
    "Here's where you can explore the training stats. You can pop the labels 'is_red' and 'quality' from the data as these will be used as the labels\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 126,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "Y_afyhhHM6WQ"
   },
   "outputs": [],
   "source": [
    "train_stats = train.describe()\n",
    "train_stats.pop('is_red')\n",
    "train_stats.pop('quality')\n",
    "train_stats = train_stats.transpose()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "ahvbYm4fNqSt"
   },
   "source": [
    "Explore the training stats!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 127,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "n_gAtPjZ0otF"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>count</th>\n",
       "      <th>mean</th>\n",
       "      <th>std</th>\n",
       "      <th>min</th>\n",
       "      <th>25%</th>\n",
       "      <th>50%</th>\n",
       "      <th>75%</th>\n",
       "      <th>max</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>fixed acidity</th>\n",
       "      <td>3155.0</td>\n",
       "      <td>7.221616</td>\n",
       "      <td>1.325297</td>\n",
       "      <td>3.80000</td>\n",
       "      <td>6.40000</td>\n",
       "      <td>7.00000</td>\n",
       "      <td>7.7000</td>\n",
       "      <td>15.60000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>volatile acidity</th>\n",
       "      <td>3155.0</td>\n",
       "      <td>0.338929</td>\n",
       "      <td>0.162476</td>\n",
       "      <td>0.08000</td>\n",
       "      <td>0.23000</td>\n",
       "      <td>0.29000</td>\n",
       "      <td>0.4000</td>\n",
       "      <td>1.24000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>citric acid</th>\n",
       "      <td>3155.0</td>\n",
       "      <td>0.321569</td>\n",
       "      <td>0.147970</td>\n",
       "      <td>0.00000</td>\n",
       "      <td>0.25000</td>\n",
       "      <td>0.31000</td>\n",
       "      <td>0.4000</td>\n",
       "      <td>1.66000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>residual sugar</th>\n",
       "      <td>3155.0</td>\n",
       "      <td>5.155911</td>\n",
       "      <td>4.639632</td>\n",
       "      <td>0.60000</td>\n",
       "      <td>1.80000</td>\n",
       "      <td>2.80000</td>\n",
       "      <td>7.6500</td>\n",
       "      <td>65.80000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>chlorides</th>\n",
       "      <td>3155.0</td>\n",
       "      <td>0.056976</td>\n",
       "      <td>0.036802</td>\n",
       "      <td>0.01200</td>\n",
       "      <td>0.03800</td>\n",
       "      <td>0.04700</td>\n",
       "      <td>0.0660</td>\n",
       "      <td>0.61100</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>free sulfur dioxide</th>\n",
       "      <td>3155.0</td>\n",
       "      <td>30.388590</td>\n",
       "      <td>17.236784</td>\n",
       "      <td>1.00000</td>\n",
       "      <td>17.00000</td>\n",
       "      <td>28.00000</td>\n",
       "      <td>41.0000</td>\n",
       "      <td>131.00000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>total sulfur dioxide</th>\n",
       "      <td>3155.0</td>\n",
       "      <td>115.062282</td>\n",
       "      <td>56.706617</td>\n",
       "      <td>6.00000</td>\n",
       "      <td>75.00000</td>\n",
       "      <td>117.00000</td>\n",
       "      <td>156.0000</td>\n",
       "      <td>344.00000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>density</th>\n",
       "      <td>3155.0</td>\n",
       "      <td>0.994633</td>\n",
       "      <td>0.003005</td>\n",
       "      <td>0.98711</td>\n",
       "      <td>0.99232</td>\n",
       "      <td>0.99481</td>\n",
       "      <td>0.9968</td>\n",
       "      <td>1.03898</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>pH</th>\n",
       "      <td>3155.0</td>\n",
       "      <td>3.223201</td>\n",
       "      <td>0.161272</td>\n",
       "      <td>2.72000</td>\n",
       "      <td>3.11000</td>\n",
       "      <td>3.21000</td>\n",
       "      <td>3.3300</td>\n",
       "      <td>4.01000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>sulphates</th>\n",
       "      <td>3155.0</td>\n",
       "      <td>0.534051</td>\n",
       "      <td>0.149149</td>\n",
       "      <td>0.22000</td>\n",
       "      <td>0.43000</td>\n",
       "      <td>0.51000</td>\n",
       "      <td>0.6000</td>\n",
       "      <td>1.95000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>alcohol</th>\n",
       "      <td>3155.0</td>\n",
       "      <td>10.504466</td>\n",
       "      <td>1.154654</td>\n",
       "      <td>8.50000</td>\n",
       "      <td>9.50000</td>\n",
       "      <td>10.30000</td>\n",
       "      <td>11.3000</td>\n",
       "      <td>14.00000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                       count        mean        std      min       25%  \\\n",
       "fixed acidity         3155.0    7.221616   1.325297  3.80000   6.40000   \n",
       "volatile acidity      3155.0    0.338929   0.162476  0.08000   0.23000   \n",
       "citric acid           3155.0    0.321569   0.147970  0.00000   0.25000   \n",
       "residual sugar        3155.0    5.155911   4.639632  0.60000   1.80000   \n",
       "chlorides             3155.0    0.056976   0.036802  0.01200   0.03800   \n",
       "free sulfur dioxide   3155.0   30.388590  17.236784  1.00000  17.00000   \n",
       "total sulfur dioxide  3155.0  115.062282  56.706617  6.00000  75.00000   \n",
       "density               3155.0    0.994633   0.003005  0.98711   0.99232   \n",
       "pH                    3155.0    3.223201   0.161272  2.72000   3.11000   \n",
       "sulphates             3155.0    0.534051   0.149149  0.22000   0.43000   \n",
       "alcohol               3155.0   10.504466   1.154654  8.50000   9.50000   \n",
       "\n",
       "                            50%       75%        max  \n",
       "fixed acidity           7.00000    7.7000   15.60000  \n",
       "volatile acidity        0.29000    0.4000    1.24000  \n",
       "citric acid             0.31000    0.4000    1.66000  \n",
       "residual sugar          2.80000    7.6500   65.80000  \n",
       "chlorides               0.04700    0.0660    0.61100  \n",
       "free sulfur dioxide    28.00000   41.0000  131.00000  \n",
       "total sulfur dioxide  117.00000  156.0000  344.00000  \n",
       "density                 0.99481    0.9968    1.03898  \n",
       "pH                      3.21000    3.3300    4.01000  \n",
       "sulphates               0.51000    0.6000    1.95000  \n",
       "alcohol                10.30000   11.3000   14.00000  "
      ]
     },
     "execution_count": 127,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_stats"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "bGPvt9jir_HC"
   },
   "source": [
    "### Get the labels (TODO)\n",
    "\n",
    "The features and labels are currently in the same dataframe.\n",
    "- You will want to store the label columns `is_red` and `quality` separately from the feature columns.  \n",
    "- The following function, `format_output`, gets these two columns from the dataframe (it's given to you).\n",
    "- `format_output` also formats the data into numpy arrays. \n",
    "- Please use the `format_output` and apply it to the `train`, `val` and `test` sets to get dataframes for the labels."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 128,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "Z_fs14XQqZVP"
   },
   "outputs": [],
   "source": [
    "def format_output(data):\n",
    "    is_red = data.pop('is_red')\n",
    "    is_red = np.array(is_red)\n",
    "    quality = data.pop('quality')\n",
    "    quality = np.array(quality)\n",
    "    return (quality, is_red)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 129,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "deletable": false,
    "id": "8L3ZZe1fQicm",
    "nbgrader": {
     "cell_type": "code",
     "checksum": "7a86809e54895a816434c48dc903f55d",
     "grade": false,
     "grade_id": "cell-5c30fa2c2a354b0f",
     "locked": false,
     "schema_version": 3,
     "solution": true,
     "task": false
    }
   },
   "outputs": [],
   "source": [
    "# Please uncomment all lines in this cell and replace those marked with `# YOUR CODE HERE`.\n",
    "# You can select all lines in this code cell with Ctrl+A (Windows/Linux) or Cmd+A (Mac), then press Ctrl+/ (Windows/Linux) or Cmd+/ (Mac) to uncomment.\n",
    "\n",
    "\n",
    "\n",
    "# format the output of the train set\n",
    "train_Y = format_output(train)\n",
    "\n",
    "# format the output of the val set\n",
    "val_Y = format_output(val)\n",
    "    \n",
    "# format the output of the test set\n",
    "test_Y = format_output(test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 130,
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "code",
     "checksum": "359cabbafaed14ec9bbc1e57a7b6f32c",
     "grade": true,
     "grade_id": "cell-4977d8befb80f56b",
     "locked": true,
     "points": 1,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[92m All public tests passed\n"
     ]
    }
   ],
   "source": [
    "utils.test_format_output(df, train_Y, val_Y, test_Y)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Notice that after you get the labels, the `train`, `val` and `test` dataframes no longer contain the label columns, and contain just the feature columns.\n",
    "- This is because you used `.pop` in the `format_output` function."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 131,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>fixed acidity</th>\n",
       "      <th>volatile acidity</th>\n",
       "      <th>citric acid</th>\n",
       "      <th>residual sugar</th>\n",
       "      <th>chlorides</th>\n",
       "      <th>free sulfur dioxide</th>\n",
       "      <th>total sulfur dioxide</th>\n",
       "      <th>density</th>\n",
       "      <th>pH</th>\n",
       "      <th>sulphates</th>\n",
       "      <th>alcohol</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>225</th>\n",
       "      <td>7.5</td>\n",
       "      <td>0.65</td>\n",
       "      <td>0.18</td>\n",
       "      <td>7.0</td>\n",
       "      <td>0.088</td>\n",
       "      <td>27.0</td>\n",
       "      <td>94.0</td>\n",
       "      <td>0.99915</td>\n",
       "      <td>3.38</td>\n",
       "      <td>0.77</td>\n",
       "      <td>9.4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3557</th>\n",
       "      <td>6.3</td>\n",
       "      <td>0.27</td>\n",
       "      <td>0.29</td>\n",
       "      <td>12.2</td>\n",
       "      <td>0.044</td>\n",
       "      <td>59.0</td>\n",
       "      <td>196.0</td>\n",
       "      <td>0.99782</td>\n",
       "      <td>3.14</td>\n",
       "      <td>0.40</td>\n",
       "      <td>8.8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3825</th>\n",
       "      <td>8.8</td>\n",
       "      <td>0.27</td>\n",
       "      <td>0.25</td>\n",
       "      <td>5.0</td>\n",
       "      <td>0.024</td>\n",
       "      <td>52.0</td>\n",
       "      <td>99.0</td>\n",
       "      <td>0.99250</td>\n",
       "      <td>2.87</td>\n",
       "      <td>0.49</td>\n",
       "      <td>11.4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1740</th>\n",
       "      <td>6.4</td>\n",
       "      <td>0.45</td>\n",
       "      <td>0.07</td>\n",
       "      <td>1.1</td>\n",
       "      <td>0.030</td>\n",
       "      <td>10.0</td>\n",
       "      <td>131.0</td>\n",
       "      <td>0.99050</td>\n",
       "      <td>2.97</td>\n",
       "      <td>0.28</td>\n",
       "      <td>10.8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1221</th>\n",
       "      <td>7.2</td>\n",
       "      <td>0.53</td>\n",
       "      <td>0.13</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0.058</td>\n",
       "      <td>18.0</td>\n",
       "      <td>22.0</td>\n",
       "      <td>0.99573</td>\n",
       "      <td>3.21</td>\n",
       "      <td>0.68</td>\n",
       "      <td>9.9</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      fixed acidity  volatile acidity  citric acid  residual sugar  chlorides  \\\n",
       "225             7.5              0.65         0.18             7.0      0.088   \n",
       "3557            6.3              0.27         0.29            12.2      0.044   \n",
       "3825            8.8              0.27         0.25             5.0      0.024   \n",
       "1740            6.4              0.45         0.07             1.1      0.030   \n",
       "1221            7.2              0.53         0.13             2.0      0.058   \n",
       "\n",
       "      free sulfur dioxide  total sulfur dioxide  density    pH  sulphates  \\\n",
       "225                  27.0                  94.0  0.99915  3.38       0.77   \n",
       "3557                 59.0                 196.0  0.99782  3.14       0.40   \n",
       "3825                 52.0                  99.0  0.99250  2.87       0.49   \n",
       "1740                 10.0                 131.0  0.99050  2.97       0.28   \n",
       "1221                 18.0                  22.0  0.99573  3.21       0.68   \n",
       "\n",
       "      alcohol  \n",
       "225       9.4  \n",
       "3557      8.8  \n",
       "3825     11.4  \n",
       "1740     10.8  \n",
       "1221      9.9  "
      ]
     },
     "execution_count": 131,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "hEdbrruAsN1D"
   },
   "source": [
    "### Normalize the data (TODO)\n",
    "\n",
    "Next, you can normalize the data, x, using the formula:\n",
    "$$x_{norm} = \\frac{x - \\mu}{\\sigma}$$\n",
    "- The `norm` function is defined for you.\n",
    "- Please apply the `norm` function to normalize the dataframes that contains the feature columns of `train`, `val` and `test` sets."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 132,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "WWiZPAHCLjUs"
   },
   "outputs": [],
   "source": [
    "def norm(x):\n",
    "    return (x - train_stats['mean']) / train_stats['std']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 133,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "deletable": false,
    "id": "JEaOi2I2Lk69",
    "nbgrader": {
     "cell_type": "code",
     "checksum": "6bc0cdcb563d192f271067aa3373ff32",
     "grade": false,
     "grade_id": "cell-d8416d975c371095",
     "locked": false,
     "schema_version": 3,
     "solution": true,
     "task": false
    }
   },
   "outputs": [],
   "source": [
    "# Please uncomment all lines in this cell and replace those marked with `# YOUR CODE HERE`.\n",
    "# You can select all lines in this code cell with Ctrl+A (Windows/Linux) or Cmd+A (Mac), then press Ctrl+/ (Windows/Linux) or Cmd+/ (Mac) to uncomment.\n",
    "\n",
    "\n",
    "\n",
    "# normalize the train set\n",
    "norm_train_X = norm(train)\n",
    "    \n",
    "# normalize the val set\n",
    "norm_val_X = norm(val)\n",
    "    \n",
    "# normalize the test set\n",
    "norm_test_X = norm(test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 134,
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "code",
     "checksum": "4f567db45bf40191601780379cc100b8",
     "grade": true,
     "grade_id": "cell-97fad979d157529b",
     "locked": true,
     "points": 1,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[92m All public tests passed\n"
     ]
    }
   ],
   "source": [
    "utils.test_norm(norm_train_X, norm_val_X, norm_test_X, train, val, test)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "hzykDwQhsaPO"
   },
   "source": [
    "## Define the Model (TODO)\n",
    "\n",
    "Define the model using the functional API. The base model will be 2 `Dense` layers of 128 neurons each, and have the `'relu'` activation.\n",
    "- Check out the documentation for [tf.keras.layers.Dense](https://www.tensorflow.org/api_docs/python/tf/keras/layers/Dense)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 135,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "deletable": false,
    "id": "Rhcns3oTFkM6",
    "nbgrader": {
     "cell_type": "code",
     "checksum": "74b031247e569526552bf13a034a1c07",
     "grade": false,
     "grade_id": "cell-73fceedad1fe351c",
     "locked": false,
     "schema_version": 3,
     "solution": true,
     "task": false
    }
   },
   "outputs": [],
   "source": [
    "# Please uncomment all lines in this cell and replace those marked with `# YOUR CODE HERE`.\n",
    "# You can select all lines in this code cell with Ctrl+A (Windows/Linux) or Cmd+A (Mac), then press Ctrl+/ (Windows/Linux) or Cmd+/ (Mac) to uncomment.\n",
    "\n",
    "\n",
    "\n",
    "def base_model(inputs):\n",
    "    \n",
    "    # connect a Dense layer with 128 neurons and a relu activation\n",
    "    x = tf.keras.layers.Dense(units=128, activation=tf.nn.relu)(inputs)\n",
    "    \n",
    "    # connect another Dense layer with 128 neurons and a relu activation\n",
    "    x = tf.keras.layers.Dense(units=128, activation=tf.nn.relu)(x)\n",
    "    return x\n",
    "  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 136,
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "code",
     "checksum": "9255924b3def80f679616e4c851a43e1",
     "grade": true,
     "grade_id": "cell-54f742a133353d75",
     "locked": true,
     "points": 1,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[92m All public tests passed\n"
     ]
    }
   ],
   "source": [
    "utils.test_base_model(base_model)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "xem_fcVws6Kz"
   },
   "source": [
    "# Define output layers of the model (TODO)\n",
    "\n",
    "You will add output layers to the base model. \n",
    "- The model will need two outputs.\n",
    "\n",
    "One output layer will predict wine quality, which is a numeric value.\n",
    "- Define a `Dense` layer with 1 neuron.\n",
    "- Since this is a regression output, the activation can be left as its default value `None`.\n",
    "\n",
    "The other output layer will predict the wine type, which is either red `1` or not red `0` (white).\n",
    "- Define a `Dense` layer with 1 neuron.\n",
    "- Since there are two possible categories, you can use a sigmoid activation for binary classification.\n",
    "\n",
    "Define the `Model`\n",
    "- Define the `Model` object, and set the following parameters:\n",
    "  - `inputs`: pass in the inputs to the model as a list.\n",
    "  - `outputs`: pass in a list of the outputs that you just defined: wine quality, then wine type.\n",
    "  - **Note**: please list the wine quality before wine type in the outputs, as this will affect the calculated loss if you choose the other order."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 139,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "deletable": false,
    "id": "n5UGF8PMVLPt",
    "nbgrader": {
     "cell_type": "code",
     "checksum": "76d35b90d20cdcbb22986cd8211057de",
     "grade": false,
     "grade_id": "cell-19e285f482f021fb",
     "locked": false,
     "schema_version": 3,
     "solution": true,
     "task": false
    }
   },
   "outputs": [],
   "source": [
    "# Please uncomment all lines in this cell and replace those marked with `# YOUR CODE HERE`.\n",
    "# You can select all lines in this code cell with Ctrl+A (Windows/Linux) or Cmd+A (Mac), then press Ctrl+/ (Windows/Linux) or Cmd+/ (Mac) to uncomment.\n",
    "\n",
    "\n",
    "\n",
    "def final_model(inputs):\n",
    "    \n",
    "    # get the base model\n",
    "    x = base_model(inputs)\n",
    "\n",
    "    # connect the output Dense layer for regression\n",
    "    wine_quality = Dense(units='1', name='wine_quality')(x)\n",
    "\n",
    "    # connect the output Dense layer for classification. this will use a sigmoid activation.\n",
    "    wine_type = Dense(units='1', activation='sigmoid', name='wine_type')(x)\n",
    "    \n",
    "    # define the model using the input and output layers\n",
    "    model = Model(inputs=inputs, outputs=[wine_quality,wine_type])\n",
    "\n",
    "    return model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 140,
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "code",
     "checksum": "89cbf89d8ab5e2e59ecf7f63f517520a",
     "grade": true,
     "grade_id": "cell-40d050f855c817d1",
     "locked": true,
     "points": 1,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[92m All public tests passed\n"
     ]
    }
   ],
   "source": [
    "utils.test_final_model(final_model)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "5R0BMTsltZyu"
   },
   "source": [
    "## Compiling the Model\n",
    "\n",
    "Next, compile the model. When setting the loss parameter of `model.compile`, you're setting the loss for each of the two outputs (wine quality and wine type).\n",
    "\n",
    "To set more than one loss, use a dictionary of key-value pairs.\n",
    "- You can look at the docs for the losses [here](https://www.tensorflow.org/api_docs/python/tf/keras/losses#functions).\n",
    "    - **Note**: For the desired spelling, please look at the \"Functions\" section of the documentation and not the \"classes\" section on that same page.\n",
    "- wine_type: Since you will be performing binary classification on wine type, you should use the binary crossentropy loss function for it.  Please pass this in as a string.  \n",
    "  - **Hint**, this should be all lowercase.  In the documentation, you'll see this under the \"Functions\" section, not the \"Classes\" section.\n",
    "- wine_quality: since this is a regression output, use the mean squared error.  Please pass it in as a string, all lowercase.\n",
    "  - **Hint**: You may notice that there are two aliases for mean squared error.  Please use the shorter name.\n",
    "\n",
    "\n",
    "You will also set the metric for each of the two outputs.  Again, to set metrics for two or more outputs, use a dictionary with key value pairs.\n",
    "- The metrics documentation is linked [here](https://www.tensorflow.org/api_docs/python/tf/keras/metrics).\n",
    "- For the wine type, please set it to accuracy as a string, all lowercase.\n",
    "- For wine quality, please use the root mean squared error.  Instead of a string, you'll set it to an instance of the class [RootMeanSquaredError](https://www.tensorflow.org/api_docs/python/tf/keras/metrics/RootMeanSquaredError), which belongs to the tf.keras.metrics module.\n",
    "\n",
    "**Note**: If you see the error message \n",
    ">Exception: wine quality loss function is incorrect.\n",
    "\n",
    "- Please also check your other losses and metrics, as the error may be caused by the other three key-value pairs and not the wine quality loss."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 141,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "deletable": false,
    "id": "LK11duUbUjmh",
    "nbgrader": {
     "cell_type": "code",
     "checksum": "22f45067ca69eb2ccadb43874dbcc27b",
     "grade": false,
     "grade_id": "cell-81afdc4dcca51d5e",
     "locked": false,
     "schema_version": 3,
     "solution": true,
     "task": false
    }
   },
   "outputs": [],
   "source": [
    "# Please uncomment all lines in this cell and replace those marked with `# YOUR CODE HERE`.\n",
    "# You can select all lines in this code cell with Ctrl+A (Windows/Linux) or Cmd+A (Mac), then press Ctrl+/ (Windows/Linux) or Cmd+/ (Mac) to uncomment.\n",
    "\n",
    "\n",
    "\n",
    "inputs = tf.keras.layers.Input(shape=(11,))\n",
    "rms = tf.keras.optimizers.RMSprop(lr=0.0001)\n",
    "model = final_model(inputs)\n",
    "\n",
    "model.compile(optimizer=rms, \n",
    "              loss = {'wine_type' : 'binary_crossentropy',\n",
    "                      'wine_quality' : 'mse'\n",
    "                     },\n",
    "              metrics = {'wine_type' : 'accuracy',\n",
    "                         'wine_quality': tf.keras.metrics.RootMeanSquaredError()\n",
    "                       }\n",
    "             )\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 142,
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "code",
     "checksum": "88e02238ea5e456ff65e835cc8158054",
     "grade": true,
     "grade_id": "cell-2eeeba02391c4632",
     "locked": true,
     "points": 1,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[92m All public tests passed\n"
     ]
    }
   ],
   "source": [
    "utils.test_model_compile(model)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "90MpAMpWuKm-"
   },
   "source": [
    "## Training the Model\n",
    "\n",
    "Fit the model to the training inputs and outputs. \n",
    "- Check the documentation for [model.fit](https://www.tensorflow.org/api_docs/python/tf/keras/Model#fit).\n",
    "- Remember to use the normalized training set as inputs. \n",
    "- For the validation data, please use the normalized validation set."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 143,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "deletable": false,
    "id": "_eiZkle4XwiY",
    "nbgrader": {
     "cell_type": "code",
     "checksum": "2ca7664be03bfd6fd3651ae44d17b793",
     "grade": false,
     "grade_id": "cell-0bb56262896f6680",
     "locked": false,
     "schema_version": 3,
     "solution": true,
     "task": false
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train on 3155 samples, validate on 789 samples\n",
      "Epoch 1/180\n",
      "3155/3155 [==============================] - 1s 345us/sample - loss: 26.4443 - wine_quality_loss: 25.7479 - wine_type_loss: 0.6589 - wine_quality_root_mean_squared_error: 5.0779 - wine_type_accuracy: 0.7401 - val_loss: 18.8026 - val_wine_quality_loss: 18.1710 - val_wine_type_loss: 0.6496 - val_wine_quality_root_mean_squared_error: 4.2606 - val_wine_type_accuracy: 0.7338\n",
      "Epoch 2/180\n",
      "3155/3155 [==============================] - 0s 117us/sample - loss: 12.8397 - wine_quality_loss: 12.1852 - wine_type_loss: 0.6297 - wine_quality_root_mean_squared_error: 3.4943 - wine_type_accuracy: 0.7442 - val_loss: 7.5376 - val_wine_quality_loss: 6.9670 - val_wine_type_loss: 0.6088 - val_wine_quality_root_mean_squared_error: 2.6321 - val_wine_type_accuracy: 0.7338\n",
      "Epoch 3/180\n",
      "3155/3155 [==============================] - 0s 96us/sample - loss: 5.0359 - wine_quality_loss: 4.4807 - wine_type_loss: 0.5469 - wine_quality_root_mean_squared_error: 2.1186 - wine_type_accuracy: 0.7442 - val_loss: 3.2062 - val_wine_quality_loss: 2.7564 - val_wine_type_loss: 0.4925 - val_wine_quality_root_mean_squared_error: 1.6471 - val_wine_type_accuracy: 0.7338\n",
      "Epoch 4/180\n",
      "3155/3155 [==============================] - 0s 95us/sample - loss: 2.8632 - wine_quality_loss: 2.4258 - wine_type_loss: 0.4316 - wine_quality_root_mean_squared_error: 1.5592 - wine_type_accuracy: 0.7664 - val_loss: 2.5085 - val_wine_quality_loss: 2.1481 - val_wine_type_loss: 0.3898 - val_wine_quality_root_mean_squared_error: 1.4554 - val_wine_type_accuracy: 0.8124\n",
      "Epoch 5/180\n",
      "3155/3155 [==============================] - 0s 95us/sample - loss: 2.3482 - wine_quality_loss: 2.0044 - wine_type_loss: 0.3423 - wine_quality_root_mean_squared_error: 1.4163 - wine_type_accuracy: 0.8834 - val_loss: 2.1457 - val_wine_quality_loss: 1.8539 - val_wine_type_loss: 0.3115 - val_wine_quality_root_mean_squared_error: 1.3542 - val_wine_type_accuracy: 0.9328\n",
      "Epoch 6/180\n",
      "3155/3155 [==============================] - 0s 92us/sample - loss: 2.0473 - wine_quality_loss: 1.7731 - wine_type_loss: 0.2739 - wine_quality_root_mean_squared_error: 1.3317 - wine_type_accuracy: 0.9509 - val_loss: 1.9080 - val_wine_quality_loss: 1.6704 - val_wine_type_loss: 0.2506 - val_wine_quality_root_mean_squared_error: 1.2873 - val_wine_type_accuracy: 0.9696\n",
      "Epoch 7/180\n",
      "3155/3155 [==============================] - 0s 93us/sample - loss: 1.8288 - wine_quality_loss: 1.6082 - wine_type_loss: 0.2203 - wine_quality_root_mean_squared_error: 1.2682 - wine_type_accuracy: 0.9693 - val_loss: 1.7069 - val_wine_quality_loss: 1.5138 - val_wine_type_loss: 0.2022 - val_wine_quality_root_mean_squared_error: 1.2266 - val_wine_type_accuracy: 0.9785\n",
      "Epoch 8/180\n",
      "3155/3155 [==============================] - 0s 78us/sample - loss: 1.6532 - wine_quality_loss: 1.4766 - wine_type_loss: 0.1778 - wine_quality_root_mean_squared_error: 1.2146 - wine_type_accuracy: 0.9794 - val_loss: 1.5614 - val_wine_quality_loss: 1.4033 - val_wine_type_loss: 0.1642 - val_wine_quality_root_mean_squared_error: 1.1820 - val_wine_type_accuracy: 0.9861\n",
      "Epoch 9/180\n",
      "3155/3155 [==============================] - 0s 92us/sample - loss: 1.5088 - wine_quality_loss: 1.3622 - wine_type_loss: 0.1460 - wine_quality_root_mean_squared_error: 1.1673 - wine_type_accuracy: 0.9829 - val_loss: 1.4262 - val_wine_quality_loss: 1.2952 - val_wine_type_loss: 0.1361 - val_wine_quality_root_mean_squared_error: 1.1358 - val_wine_type_accuracy: 0.9861\n",
      "Epoch 10/180\n",
      "3155/3155 [==============================] - 0s 93us/sample - loss: 1.3971 - wine_quality_loss: 1.2779 - wine_type_loss: 0.1231 - wine_quality_root_mean_squared_error: 1.1290 - wine_type_accuracy: 0.9861 - val_loss: 1.3174 - val_wine_quality_loss: 1.2051 - val_wine_type_loss: 0.1154 - val_wine_quality_root_mean_squared_error: 1.0963 - val_wine_type_accuracy: 0.9861\n",
      "Epoch 11/180\n",
      "3155/3155 [==============================] - 0s 94us/sample - loss: 1.2963 - wine_quality_loss: 1.1903 - wine_type_loss: 0.1051 - wine_quality_root_mean_squared_error: 1.0914 - wine_type_accuracy: 0.9864 - val_loss: 1.2265 - val_wine_quality_loss: 1.1289 - val_wine_type_loss: 0.0992 - val_wine_quality_root_mean_squared_error: 1.0617 - val_wine_type_accuracy: 0.9861\n",
      "Epoch 12/180\n",
      "3155/3155 [==============================] - 0s 93us/sample - loss: 1.2088 - wine_quality_loss: 1.1156 - wine_type_loss: 0.0916 - wine_quality_root_mean_squared_error: 1.0570 - wine_type_accuracy: 0.9870 - val_loss: 1.1362 - val_wine_quality_loss: 1.0499 - val_wine_type_loss: 0.0872 - val_wine_quality_root_mean_squared_error: 1.0241 - val_wine_type_accuracy: 0.9873\n",
      "Epoch 13/180\n",
      "3155/3155 [==============================] - 0s 95us/sample - loss: 1.1328 - wine_quality_loss: 1.0514 - wine_type_loss: 0.0823 - wine_quality_root_mean_squared_error: 1.0254 - wine_type_accuracy: 0.9880 - val_loss: 1.0586 - val_wine_quality_loss: 0.9809 - val_wine_type_loss: 0.0779 - val_wine_quality_root_mean_squared_error: 0.9902 - val_wine_type_accuracy: 0.9873\n",
      "Epoch 14/180\n",
      "3155/3155 [==============================] - 0s 91us/sample - loss: 1.0612 - wine_quality_loss: 0.9874 - wine_type_loss: 0.0734 - wine_quality_root_mean_squared_error: 0.9938 - wine_type_accuracy: 0.9880 - val_loss: 0.9940 - val_wine_quality_loss: 0.9224 - val_wine_type_loss: 0.0714 - val_wine_quality_root_mean_squared_error: 0.9604 - val_wine_type_accuracy: 0.9873\n",
      "Epoch 15/180\n",
      "3155/3155 [==============================] - 0s 92us/sample - loss: 0.9960 - wine_quality_loss: 0.9281 - wine_type_loss: 0.0675 - wine_quality_root_mean_squared_error: 0.9636 - wine_type_accuracy: 0.9886 - val_loss: 0.9336 - val_wine_quality_loss: 0.8674 - val_wine_type_loss: 0.0657 - val_wine_quality_root_mean_squared_error: 0.9315 - val_wine_type_accuracy: 0.9886\n",
      "Epoch 16/180\n",
      "3155/3155 [==============================] - 0s 76us/sample - loss: 0.9402 - wine_quality_loss: 0.8760 - wine_type_loss: 0.0625 - wine_quality_root_mean_squared_error: 0.9368 - wine_type_accuracy: 0.9895 - val_loss: 0.8809 - val_wine_quality_loss: 0.8189 - val_wine_type_loss: 0.0609 - val_wine_quality_root_mean_squared_error: 0.9054 - val_wine_type_accuracy: 0.9886\n",
      "Epoch 17/180\n",
      "3155/3155 [==============================] - 0s 92us/sample - loss: 0.8877 - wine_quality_loss: 0.8281 - wine_type_loss: 0.0582 - wine_quality_root_mean_squared_error: 0.9107 - wine_type_accuracy: 0.9902 - val_loss: 0.8244 - val_wine_quality_loss: 0.7660 - val_wine_type_loss: 0.0575 - val_wine_quality_root_mean_squared_error: 0.8756 - val_wine_type_accuracy: 0.9899\n",
      "Epoch 18/180\n",
      "3155/3155 [==============================] - 0s 93us/sample - loss: 0.8376 - wine_quality_loss: 0.7817 - wine_type_loss: 0.0551 - wine_quality_root_mean_squared_error: 0.8846 - wine_type_accuracy: 0.9902 - val_loss: 0.7918 - val_wine_quality_loss: 0.7365 - val_wine_type_loss: 0.0542 - val_wine_quality_root_mean_squared_error: 0.8587 - val_wine_type_accuracy: 0.9899\n",
      "Epoch 19/180\n",
      "3155/3155 [==============================] - 0s 92us/sample - loss: 0.7908 - wine_quality_loss: 0.7383 - wine_type_loss: 0.0521 - wine_quality_root_mean_squared_error: 0.8594 - wine_type_accuracy: 0.9905 - val_loss: 0.7538 - val_wine_quality_loss: 0.7004 - val_wine_type_loss: 0.0514 - val_wine_quality_root_mean_squared_error: 0.8379 - val_wine_type_accuracy: 0.9899\n",
      "Epoch 20/180\n",
      "3155/3155 [==============================] - 0s 91us/sample - loss: 0.7488 - wine_quality_loss: 0.7118 - wine_type_loss: 0.0502 - wine_quality_root_mean_squared_error: 0.8361 - wine_type_accuracy: 0.9908 - val_loss: 0.7072 - val_wine_quality_loss: 0.6559 - val_wine_type_loss: 0.0493 - val_wine_quality_root_mean_squared_error: 0.8109 - val_wine_type_accuracy: 0.9899\n",
      "Epoch 21/180\n",
      "3155/3155 [==============================] - 0s 92us/sample - loss: 0.7083 - wine_quality_loss: 0.6605 - wine_type_loss: 0.0479 - wine_quality_root_mean_squared_error: 0.8127 - wine_type_accuracy: 0.9908 - val_loss: 0.6641 - val_wine_quality_loss: 0.6144 - val_wine_type_loss: 0.0477 - val_wine_quality_root_mean_squared_error: 0.7849 - val_wine_type_accuracy: 0.9911\n",
      "Epoch 22/180\n",
      "3155/3155 [==============================] - 0s 76us/sample - loss: 0.6712 - wine_quality_loss: 0.6248 - wine_type_loss: 0.0468 - wine_quality_root_mean_squared_error: 0.7906 - wine_type_accuracy: 0.9908 - val_loss: 0.6348 - val_wine_quality_loss: 0.5873 - val_wine_type_loss: 0.0460 - val_wine_quality_root_mean_squared_error: 0.7672 - val_wine_type_accuracy: 0.9899\n",
      "Epoch 23/180\n",
      "3155/3155 [==============================] - 0s 93us/sample - loss: 0.6384 - wine_quality_loss: 0.5940 - wine_type_loss: 0.0445 - wine_quality_root_mean_squared_error: 0.7705 - wine_type_accuracy: 0.9914 - val_loss: 0.5987 - val_wine_quality_loss: 0.5521 - val_wine_type_loss: 0.0445 - val_wine_quality_root_mean_squared_error: 0.7442 - val_wine_type_accuracy: 0.9899\n",
      "Epoch 24/180\n",
      "3155/3155 [==============================] - 0s 92us/sample - loss: 0.6096 - wine_quality_loss: 0.5663 - wine_type_loss: 0.0431 - wine_quality_root_mean_squared_error: 0.7526 - wine_type_accuracy: 0.9911 - val_loss: 0.5695 - val_wine_quality_loss: 0.5241 - val_wine_type_loss: 0.0432 - val_wine_quality_root_mean_squared_error: 0.7252 - val_wine_type_accuracy: 0.9899\n",
      "Epoch 25/180\n",
      "3155/3155 [==============================] - 0s 94us/sample - loss: 0.5802 - wine_quality_loss: 0.5368 - wine_type_loss: 0.0419 - wine_quality_root_mean_squared_error: 0.7336 - wine_type_accuracy: 0.9914 - val_loss: 0.5494 - val_wine_quality_loss: 0.5050 - val_wine_type_loss: 0.0422 - val_wine_quality_root_mean_squared_error: 0.7120 - val_wine_type_accuracy: 0.9899\n",
      "Epoch 26/180\n",
      "3155/3155 [==============================] - 0s 91us/sample - loss: 0.5549 - wine_quality_loss: 0.5131 - wine_type_loss: 0.0408 - wine_quality_root_mean_squared_error: 0.7170 - wine_type_accuracy: 0.9918 - val_loss: 0.5232 - val_wine_quality_loss: 0.4804 - val_wine_type_loss: 0.0412 - val_wine_quality_root_mean_squared_error: 0.6940 - val_wine_type_accuracy: 0.9911\n",
      "Epoch 27/180\n",
      "3155/3155 [==============================] - 0s 95us/sample - loss: 0.5345 - wine_quality_loss: 0.4946 - wine_type_loss: 0.0403 - wine_quality_root_mean_squared_error: 0.7032 - wine_type_accuracy: 0.9914 - val_loss: 0.5088 - val_wine_quality_loss: 0.4662 - val_wine_type_loss: 0.0403 - val_wine_quality_root_mean_squared_error: 0.6842 - val_wine_type_accuracy: 0.9924\n",
      "Epoch 28/180\n",
      "3155/3155 [==============================] - 0s 94us/sample - loss: 0.5128 - wine_quality_loss: 0.4739 - wine_type_loss: 0.0390 - wine_quality_root_mean_squared_error: 0.6883 - wine_type_accuracy: 0.9921 - val_loss: 0.4850 - val_wine_quality_loss: 0.4436 - val_wine_type_loss: 0.0397 - val_wine_quality_root_mean_squared_error: 0.6671 - val_wine_type_accuracy: 0.9937\n",
      "Epoch 29/180\n",
      "3155/3155 [==============================] - 0s 94us/sample - loss: 0.4950 - wine_quality_loss: 0.4559 - wine_type_loss: 0.0399 - wine_quality_root_mean_squared_error: 0.6757 - wine_type_accuracy: 0.9921 - val_loss: 0.4726 - val_wine_quality_loss: 0.4319 - val_wine_type_loss: 0.0388 - val_wine_quality_root_mean_squared_error: 0.6583 - val_wine_type_accuracy: 0.9937\n",
      "Epoch 30/180\n",
      "3155/3155 [==============================] - 0s 93us/sample - loss: 0.4772 - wine_quality_loss: 0.4390 - wine_type_loss: 0.0377 - wine_quality_root_mean_squared_error: 0.6629 - wine_type_accuracy: 0.9921 - val_loss: 0.4534 - val_wine_quality_loss: 0.4132 - val_wine_type_loss: 0.0384 - val_wine_quality_root_mean_squared_error: 0.6439 - val_wine_type_accuracy: 0.9937\n",
      "Epoch 31/180\n",
      "3155/3155 [==============================] - 0s 98us/sample - loss: 0.4635 - wine_quality_loss: 0.4266 - wine_type_loss: 0.0369 - wine_quality_root_mean_squared_error: 0.6531 - wine_type_accuracy: 0.9930 - val_loss: 0.4502 - val_wine_quality_loss: 0.4106 - val_wine_type_loss: 0.0378 - val_wine_quality_root_mean_squared_error: 0.6419 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 32/180\n",
      "3155/3155 [==============================] - 0s 96us/sample - loss: 0.4507 - wine_quality_loss: 0.4154 - wine_type_loss: 0.0363 - wine_quality_root_mean_squared_error: 0.6437 - wine_type_accuracy: 0.9930 - val_loss: 0.4361 - val_wine_quality_loss: 0.3968 - val_wine_type_loss: 0.0374 - val_wine_quality_root_mean_squared_error: 0.6311 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 33/180\n",
      "3155/3155 [==============================] - 0s 98us/sample - loss: 0.4380 - wine_quality_loss: 0.4022 - wine_type_loss: 0.0360 - wine_quality_root_mean_squared_error: 0.6342 - wine_type_accuracy: 0.9930 - val_loss: 0.4278 - val_wine_quality_loss: 0.3889 - val_wine_type_loss: 0.0371 - val_wine_quality_root_mean_squared_error: 0.6248 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 34/180\n",
      "3155/3155 [==============================] - 0s 97us/sample - loss: 0.4280 - wine_quality_loss: 0.3921 - wine_type_loss: 0.0353 - wine_quality_root_mean_squared_error: 0.6266 - wine_type_accuracy: 0.9930 - val_loss: 0.4153 - val_wine_quality_loss: 0.3771 - val_wine_type_loss: 0.0365 - val_wine_quality_root_mean_squared_error: 0.6151 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 35/180\n",
      "3155/3155 [==============================] - 0s 95us/sample - loss: 0.4200 - wine_quality_loss: 0.3857 - wine_type_loss: 0.0348 - wine_quality_root_mean_squared_error: 0.6206 - wine_type_accuracy: 0.9933 - val_loss: 0.4041 - val_wine_quality_loss: 0.3663 - val_wine_type_loss: 0.0361 - val_wine_quality_root_mean_squared_error: 0.6063 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 36/180\n",
      "3155/3155 [==============================] - 0s 95us/sample - loss: 0.4083 - wine_quality_loss: 0.3729 - wine_type_loss: 0.0347 - wine_quality_root_mean_squared_error: 0.6114 - wine_type_accuracy: 0.9933 - val_loss: 0.4018 - val_wine_quality_loss: 0.3642 - val_wine_type_loss: 0.0357 - val_wine_quality_root_mean_squared_error: 0.6048 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 37/180\n",
      "3155/3155 [==============================] - 0s 94us/sample - loss: 0.4037 - wine_quality_loss: 0.3704 - wine_type_loss: 0.0339 - wine_quality_root_mean_squared_error: 0.6081 - wine_type_accuracy: 0.9930 - val_loss: 0.4006 - val_wine_quality_loss: 0.3630 - val_wine_type_loss: 0.0356 - val_wine_quality_root_mean_squared_error: 0.6039 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 38/180\n",
      "3155/3155 [==============================] - 0s 95us/sample - loss: 0.3959 - wine_quality_loss: 0.3630 - wine_type_loss: 0.0338 - wine_quality_root_mean_squared_error: 0.6021 - wine_type_accuracy: 0.9930 - val_loss: 0.3895 - val_wine_quality_loss: 0.3526 - val_wine_type_loss: 0.0352 - val_wine_quality_root_mean_squared_error: 0.5949 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 39/180\n",
      "3155/3155 [==============================] - 0s 95us/sample - loss: 0.3891 - wine_quality_loss: 0.3556 - wine_type_loss: 0.0329 - wine_quality_root_mean_squared_error: 0.5967 - wine_type_accuracy: 0.9930 - val_loss: 0.3867 - val_wine_quality_loss: 0.3498 - val_wine_type_loss: 0.0350 - val_wine_quality_root_mean_squared_error: 0.5927 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 40/180\n",
      "3155/3155 [==============================] - 0s 96us/sample - loss: 0.3847 - wine_quality_loss: 0.3523 - wine_type_loss: 0.0332 - wine_quality_root_mean_squared_error: 0.5933 - wine_type_accuracy: 0.9933 - val_loss: 0.3811 - val_wine_quality_loss: 0.3449 - val_wine_type_loss: 0.0348 - val_wine_quality_root_mean_squared_error: 0.5881 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 41/180\n",
      "3155/3155 [==============================] - 0s 95us/sample - loss: 0.3796 - wine_quality_loss: 0.3468 - wine_type_loss: 0.0322 - wine_quality_root_mean_squared_error: 0.5893 - wine_type_accuracy: 0.9933 - val_loss: 0.3746 - val_wine_quality_loss: 0.3386 - val_wine_type_loss: 0.0345 - val_wine_quality_root_mean_squared_error: 0.5828 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 42/180\n",
      "3155/3155 [==============================] - 0s 96us/sample - loss: 0.3747 - wine_quality_loss: 0.3428 - wine_type_loss: 0.0332 - wine_quality_root_mean_squared_error: 0.5855 - wine_type_accuracy: 0.9937 - val_loss: 0.3746 - val_wine_quality_loss: 0.3386 - val_wine_type_loss: 0.0344 - val_wine_quality_root_mean_squared_error: 0.5829 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 43/180\n",
      "3155/3155 [==============================] - 0s 95us/sample - loss: 0.3707 - wine_quality_loss: 0.3388 - wine_type_loss: 0.0316 - wine_quality_root_mean_squared_error: 0.5823 - wine_type_accuracy: 0.9940 - val_loss: 0.3670 - val_wine_quality_loss: 0.3314 - val_wine_type_loss: 0.0344 - val_wine_quality_root_mean_squared_error: 0.5764 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 44/180\n",
      "3155/3155 [==============================] - 0s 97us/sample - loss: 0.3684 - wine_quality_loss: 0.3369 - wine_type_loss: 0.0313 - wine_quality_root_mean_squared_error: 0.5805 - wine_type_accuracy: 0.9943 - val_loss: 0.3664 - val_wine_quality_loss: 0.3312 - val_wine_type_loss: 0.0341 - val_wine_quality_root_mean_squared_error: 0.5762 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 45/180\n",
      "3155/3155 [==============================] - 0s 94us/sample - loss: 0.3643 - wine_quality_loss: 0.3326 - wine_type_loss: 0.0310 - wine_quality_root_mean_squared_error: 0.5773 - wine_type_accuracy: 0.9943 - val_loss: 0.3629 - val_wine_quality_loss: 0.3278 - val_wine_type_loss: 0.0338 - val_wine_quality_root_mean_squared_error: 0.5733 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 46/180\n",
      "3155/3155 [==============================] - 0s 112us/sample - loss: 0.3609 - wine_quality_loss: 0.3301 - wine_type_loss: 0.0310 - wine_quality_root_mean_squared_error: 0.5746 - wine_type_accuracy: 0.9940 - val_loss: 0.3585 - val_wine_quality_loss: 0.3234 - val_wine_type_loss: 0.0337 - val_wine_quality_root_mean_squared_error: 0.5696 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 47/180\n",
      "3155/3155 [==============================] - 0s 92us/sample - loss: 0.3581 - wine_quality_loss: 0.3275 - wine_type_loss: 0.0304 - wine_quality_root_mean_squared_error: 0.5723 - wine_type_accuracy: 0.9943 - val_loss: 0.3629 - val_wine_quality_loss: 0.3280 - val_wine_type_loss: 0.0335 - val_wine_quality_root_mean_squared_error: 0.5736 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 48/180\n",
      "3155/3155 [==============================] - 0s 94us/sample - loss: 0.3560 - wine_quality_loss: 0.3262 - wine_type_loss: 0.0301 - wine_quality_root_mean_squared_error: 0.5708 - wine_type_accuracy: 0.9946 - val_loss: 0.3583 - val_wine_quality_loss: 0.3237 - val_wine_type_loss: 0.0334 - val_wine_quality_root_mean_squared_error: 0.5696 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 49/180\n",
      "3155/3155 [==============================] - 0s 96us/sample - loss: 0.3527 - wine_quality_loss: 0.3220 - wine_type_loss: 0.0298 - wine_quality_root_mean_squared_error: 0.5682 - wine_type_accuracy: 0.9943 - val_loss: 0.3592 - val_wine_quality_loss: 0.3246 - val_wine_type_loss: 0.0331 - val_wine_quality_root_mean_squared_error: 0.5707 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 50/180\n",
      "3155/3155 [==============================] - 0s 79us/sample - loss: 0.3503 - wine_quality_loss: 0.3215 - wine_type_loss: 0.0297 - wine_quality_root_mean_squared_error: 0.5662 - wine_type_accuracy: 0.9946 - val_loss: 0.3534 - val_wine_quality_loss: 0.3190 - val_wine_type_loss: 0.0331 - val_wine_quality_root_mean_squared_error: 0.5656 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 51/180\n",
      "3155/3155 [==============================] - 0s 94us/sample - loss: 0.3468 - wine_quality_loss: 0.3173 - wine_type_loss: 0.0292 - wine_quality_root_mean_squared_error: 0.5634 - wine_type_accuracy: 0.9946 - val_loss: 0.3603 - val_wine_quality_loss: 0.3260 - val_wine_type_loss: 0.0330 - val_wine_quality_root_mean_squared_error: 0.5718 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 52/180\n",
      "3155/3155 [==============================] - 0s 112us/sample - loss: 0.3451 - wine_quality_loss: 0.3159 - wine_type_loss: 0.0291 - wine_quality_root_mean_squared_error: 0.5621 - wine_type_accuracy: 0.9946 - val_loss: 0.3505 - val_wine_quality_loss: 0.3169 - val_wine_type_loss: 0.0328 - val_wine_quality_root_mean_squared_error: 0.5633 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 53/180\n",
      "3155/3155 [==============================] - 0s 77us/sample - loss: 0.3433 - wine_quality_loss: 0.3140 - wine_type_loss: 0.0309 - wine_quality_root_mean_squared_error: 0.5608 - wine_type_accuracy: 0.9946 - val_loss: 0.3549 - val_wine_quality_loss: 0.3210 - val_wine_type_loss: 0.0328 - val_wine_quality_root_mean_squared_error: 0.5672 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 54/180\n",
      "3155/3155 [==============================] - 0s 95us/sample - loss: 0.3400 - wine_quality_loss: 0.3115 - wine_type_loss: 0.0285 - wine_quality_root_mean_squared_error: 0.5581 - wine_type_accuracy: 0.9946 - val_loss: 0.3484 - val_wine_quality_loss: 0.3145 - val_wine_type_loss: 0.0325 - val_wine_quality_root_mean_squared_error: 0.5617 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 55/180\n",
      "3155/3155 [==============================] - 0s 94us/sample - loss: 0.3402 - wine_quality_loss: 0.3116 - wine_type_loss: 0.0283 - wine_quality_root_mean_squared_error: 0.5584 - wine_type_accuracy: 0.9946 - val_loss: 0.3496 - val_wine_quality_loss: 0.3163 - val_wine_type_loss: 0.0324 - val_wine_quality_root_mean_squared_error: 0.5629 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 56/180\n",
      "3155/3155 [==============================] - 0s 111us/sample - loss: 0.3388 - wine_quality_loss: 0.3112 - wine_type_loss: 0.0280 - wine_quality_root_mean_squared_error: 0.5574 - wine_type_accuracy: 0.9946 - val_loss: 0.3475 - val_wine_quality_loss: 0.3142 - val_wine_type_loss: 0.0324 - val_wine_quality_root_mean_squared_error: 0.5610 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 57/180\n",
      "3155/3155 [==============================] - 0s 79us/sample - loss: 0.3376 - wine_quality_loss: 0.3099 - wine_type_loss: 0.0279 - wine_quality_root_mean_squared_error: 0.5565 - wine_type_accuracy: 0.9946 - val_loss: 0.3457 - val_wine_quality_loss: 0.3124 - val_wine_type_loss: 0.0323 - val_wine_quality_root_mean_squared_error: 0.5595 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 58/180\n",
      "3155/3155 [==============================] - 0s 95us/sample - loss: 0.3344 - wine_quality_loss: 0.3071 - wine_type_loss: 0.0276 - wine_quality_root_mean_squared_error: 0.5537 - wine_type_accuracy: 0.9946 - val_loss: 0.3505 - val_wine_quality_loss: 0.3169 - val_wine_type_loss: 0.0321 - val_wine_quality_root_mean_squared_error: 0.5638 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 59/180\n",
      "3155/3155 [==============================] - 0s 79us/sample - loss: 0.3339 - wine_quality_loss: 0.3066 - wine_type_loss: 0.0274 - wine_quality_root_mean_squared_error: 0.5536 - wine_type_accuracy: 0.9949 - val_loss: 0.3482 - val_wine_quality_loss: 0.3153 - val_wine_type_loss: 0.0319 - val_wine_quality_root_mean_squared_error: 0.5620 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 60/180\n",
      "3155/3155 [==============================] - 0s 95us/sample - loss: 0.3330 - wine_quality_loss: 0.3054 - wine_type_loss: 0.0272 - wine_quality_root_mean_squared_error: 0.5529 - wine_type_accuracy: 0.9949 - val_loss: 0.3476 - val_wine_quality_loss: 0.3146 - val_wine_type_loss: 0.0320 - val_wine_quality_root_mean_squared_error: 0.5615 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 61/180\n",
      "3155/3155 [==============================] - 0s 96us/sample - loss: 0.3320 - wine_quality_loss: 0.3055 - wine_type_loss: 0.0270 - wine_quality_root_mean_squared_error: 0.5522 - wine_type_accuracy: 0.9952 - val_loss: 0.3438 - val_wine_quality_loss: 0.3108 - val_wine_type_loss: 0.0318 - val_wine_quality_root_mean_squared_error: 0.5582 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 62/180\n",
      "3155/3155 [==============================] - 0s 94us/sample - loss: 0.3308 - wine_quality_loss: 0.3038 - wine_type_loss: 0.0268 - wine_quality_root_mean_squared_error: 0.5513 - wine_type_accuracy: 0.9952 - val_loss: 0.3445 - val_wine_quality_loss: 0.3118 - val_wine_type_loss: 0.0317 - val_wine_quality_root_mean_squared_error: 0.5590 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 63/180\n",
      "3155/3155 [==============================] - 0s 111us/sample - loss: 0.3295 - wine_quality_loss: 0.3031 - wine_type_loss: 0.0268 - wine_quality_root_mean_squared_error: 0.5501 - wine_type_accuracy: 0.9952 - val_loss: 0.3449 - val_wine_quality_loss: 0.3122 - val_wine_type_loss: 0.0315 - val_wine_quality_root_mean_squared_error: 0.5594 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 64/180\n",
      "3155/3155 [==============================] - 0s 96us/sample - loss: 0.3291 - wine_quality_loss: 0.3022 - wine_type_loss: 0.0287 - wine_quality_root_mean_squared_error: 0.5500 - wine_type_accuracy: 0.9949 - val_loss: 0.3404 - val_wine_quality_loss: 0.3082 - val_wine_type_loss: 0.0314 - val_wine_quality_root_mean_squared_error: 0.5555 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 65/180\n",
      "3155/3155 [==============================] - 0s 77us/sample - loss: 0.3273 - wine_quality_loss: 0.3011 - wine_type_loss: 0.0264 - wine_quality_root_mean_squared_error: 0.5485 - wine_type_accuracy: 0.9952 - val_loss: 0.3445 - val_wine_quality_loss: 0.3123 - val_wine_type_loss: 0.0314 - val_wine_quality_root_mean_squared_error: 0.5593 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 66/180\n",
      "3155/3155 [==============================] - 0s 94us/sample - loss: 0.3266 - wine_quality_loss: 0.3004 - wine_type_loss: 0.0262 - wine_quality_root_mean_squared_error: 0.5480 - wine_type_accuracy: 0.9952 - val_loss: 0.3408 - val_wine_quality_loss: 0.3084 - val_wine_type_loss: 0.0312 - val_wine_quality_root_mean_squared_error: 0.5560 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 67/180\n",
      "3155/3155 [==============================] - 0s 94us/sample - loss: 0.3243 - wine_quality_loss: 0.2985 - wine_type_loss: 0.0260 - wine_quality_root_mean_squared_error: 0.5461 - wine_type_accuracy: 0.9956 - val_loss: 0.3434 - val_wine_quality_loss: 0.3110 - val_wine_type_loss: 0.0311 - val_wine_quality_root_mean_squared_error: 0.5584 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 68/180\n",
      "3155/3155 [==============================] - 0s 95us/sample - loss: 0.3226 - wine_quality_loss: 0.2971 - wine_type_loss: 0.0258 - wine_quality_root_mean_squared_error: 0.5447 - wine_type_accuracy: 0.9956 - val_loss: 0.3465 - val_wine_quality_loss: 0.3144 - val_wine_type_loss: 0.0310 - val_wine_quality_root_mean_squared_error: 0.5613 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 69/180\n",
      "3155/3155 [==============================] - 0s 94us/sample - loss: 0.3235 - wine_quality_loss: 0.2971 - wine_type_loss: 0.0260 - wine_quality_root_mean_squared_error: 0.5456 - wine_type_accuracy: 0.9956 - val_loss: 0.3455 - val_wine_quality_loss: 0.3133 - val_wine_type_loss: 0.0309 - val_wine_quality_root_mean_squared_error: 0.5605 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 70/180\n",
      "3155/3155 [==============================] - 0s 95us/sample - loss: 0.3224 - wine_quality_loss: 0.2969 - wine_type_loss: 0.0255 - wine_quality_root_mean_squared_error: 0.5449 - wine_type_accuracy: 0.9956 - val_loss: 0.3428 - val_wine_quality_loss: 0.3112 - val_wine_type_loss: 0.0308 - val_wine_quality_root_mean_squared_error: 0.5583 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 71/180\n",
      "3155/3155 [==============================] - 0s 94us/sample - loss: 0.3210 - wine_quality_loss: 0.2953 - wine_type_loss: 0.0253 - wine_quality_root_mean_squared_error: 0.5437 - wine_type_accuracy: 0.9956 - val_loss: 0.3428 - val_wine_quality_loss: 0.3113 - val_wine_type_loss: 0.0308 - val_wine_quality_root_mean_squared_error: 0.5582 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 72/180\n",
      "3155/3155 [==============================] - 0s 94us/sample - loss: 0.3199 - wine_quality_loss: 0.2950 - wine_type_loss: 0.0253 - wine_quality_root_mean_squared_error: 0.5428 - wine_type_accuracy: 0.9956 - val_loss: 0.3472 - val_wine_quality_loss: 0.3153 - val_wine_type_loss: 0.0308 - val_wine_quality_root_mean_squared_error: 0.5622 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 73/180\n",
      "3155/3155 [==============================] - 0s 95us/sample - loss: 0.3185 - wine_quality_loss: 0.2933 - wine_type_loss: 0.0251 - wine_quality_root_mean_squared_error: 0.5416 - wine_type_accuracy: 0.9956 - val_loss: 0.3436 - val_wine_quality_loss: 0.3119 - val_wine_type_loss: 0.0307 - val_wine_quality_root_mean_squared_error: 0.5590 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 74/180\n",
      "3155/3155 [==============================] - 0s 96us/sample - loss: 0.3180 - wine_quality_loss: 0.2935 - wine_type_loss: 0.0249 - wine_quality_root_mean_squared_error: 0.5413 - wine_type_accuracy: 0.9956 - val_loss: 0.3380 - val_wine_quality_loss: 0.3066 - val_wine_type_loss: 0.0306 - val_wine_quality_root_mean_squared_error: 0.5541 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 75/180\n",
      "3155/3155 [==============================] - 0s 95us/sample - loss: 0.3170 - wine_quality_loss: 0.2924 - wine_type_loss: 0.0248 - wine_quality_root_mean_squared_error: 0.5405 - wine_type_accuracy: 0.9956 - val_loss: 0.3361 - val_wine_quality_loss: 0.3050 - val_wine_type_loss: 0.0304 - val_wine_quality_root_mean_squared_error: 0.5525 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 76/180\n",
      "3155/3155 [==============================] - 0s 95us/sample - loss: 0.3165 - wine_quality_loss: 0.2914 - wine_type_loss: 0.0246 - wine_quality_root_mean_squared_error: 0.5402 - wine_type_accuracy: 0.9956 - val_loss: 0.3355 - val_wine_quality_loss: 0.3047 - val_wine_type_loss: 0.0303 - val_wine_quality_root_mean_squared_error: 0.5521 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 77/180\n",
      "3155/3155 [==============================] - 0s 96us/sample - loss: 0.3149 - wine_quality_loss: 0.2902 - wine_type_loss: 0.0244 - wine_quality_root_mean_squared_error: 0.5390 - wine_type_accuracy: 0.9956 - val_loss: 0.3407 - val_wine_quality_loss: 0.3093 - val_wine_type_loss: 0.0305 - val_wine_quality_root_mean_squared_error: 0.5566 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 78/180\n",
      "3155/3155 [==============================] - 0s 94us/sample - loss: 0.3146 - wine_quality_loss: 0.2897 - wine_type_loss: 0.0259 - wine_quality_root_mean_squared_error: 0.5387 - wine_type_accuracy: 0.9959 - val_loss: 0.3387 - val_wine_quality_loss: 0.3075 - val_wine_type_loss: 0.0303 - val_wine_quality_root_mean_squared_error: 0.5550 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 79/180\n",
      "3155/3155 [==============================] - 0s 95us/sample - loss: 0.3142 - wine_quality_loss: 0.2900 - wine_type_loss: 0.0242 - wine_quality_root_mean_squared_error: 0.5385 - wine_type_accuracy: 0.9956 - val_loss: 0.3456 - val_wine_quality_loss: 0.3145 - val_wine_type_loss: 0.0302 - val_wine_quality_root_mean_squared_error: 0.5613 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 80/180\n",
      "3155/3155 [==============================] - 0s 94us/sample - loss: 0.3137 - wine_quality_loss: 0.2892 - wine_type_loss: 0.0240 - wine_quality_root_mean_squared_error: 0.5382 - wine_type_accuracy: 0.9959 - val_loss: 0.3343 - val_wine_quality_loss: 0.3036 - val_wine_type_loss: 0.0300 - val_wine_quality_root_mean_squared_error: 0.5513 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 81/180\n",
      "3155/3155 [==============================] - 0s 94us/sample - loss: 0.3118 - wine_quality_loss: 0.2876 - wine_type_loss: 0.0239 - wine_quality_root_mean_squared_error: 0.5365 - wine_type_accuracy: 0.9959 - val_loss: 0.3394 - val_wine_quality_loss: 0.3091 - val_wine_type_loss: 0.0299 - val_wine_quality_root_mean_squared_error: 0.5561 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 82/180\n",
      "3155/3155 [==============================] - 0s 95us/sample - loss: 0.3112 - wine_quality_loss: 0.2874 - wine_type_loss: 0.0238 - wine_quality_root_mean_squared_error: 0.5360 - wine_type_accuracy: 0.9959 - val_loss: 0.3382 - val_wine_quality_loss: 0.3076 - val_wine_type_loss: 0.0300 - val_wine_quality_root_mean_squared_error: 0.5548 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 83/180\n",
      "3155/3155 [==============================] - 0s 96us/sample - loss: 0.3112 - wine_quality_loss: 0.2873 - wine_type_loss: 0.0237 - wine_quality_root_mean_squared_error: 0.5361 - wine_type_accuracy: 0.9959 - val_loss: 0.3331 - val_wine_quality_loss: 0.3029 - val_wine_type_loss: 0.0297 - val_wine_quality_root_mean_squared_error: 0.5505 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 84/180\n",
      "3155/3155 [==============================] - 0s 96us/sample - loss: 0.3100 - wine_quality_loss: 0.2860 - wine_type_loss: 0.0236 - wine_quality_root_mean_squared_error: 0.5351 - wine_type_accuracy: 0.9959 - val_loss: 0.3345 - val_wine_quality_loss: 0.3042 - val_wine_type_loss: 0.0297 - val_wine_quality_root_mean_squared_error: 0.5517 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 85/180\n",
      "3155/3155 [==============================] - 0s 95us/sample - loss: 0.3095 - wine_quality_loss: 0.2855 - wine_type_loss: 0.0234 - wine_quality_root_mean_squared_error: 0.5348 - wine_type_accuracy: 0.9959 - val_loss: 0.3415 - val_wine_quality_loss: 0.3114 - val_wine_type_loss: 0.0296 - val_wine_quality_root_mean_squared_error: 0.5581 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 86/180\n",
      "3155/3155 [==============================] - 0s 94us/sample - loss: 0.3093 - wine_quality_loss: 0.2860 - wine_type_loss: 0.0233 - wine_quality_root_mean_squared_error: 0.5347 - wine_type_accuracy: 0.9959 - val_loss: 0.3428 - val_wine_quality_loss: 0.3125 - val_wine_type_loss: 0.0295 - val_wine_quality_root_mean_squared_error: 0.5594 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 87/180\n",
      "3155/3155 [==============================] - 0s 96us/sample - loss: 0.3085 - wine_quality_loss: 0.2855 - wine_type_loss: 0.0232 - wine_quality_root_mean_squared_error: 0.5341 - wine_type_accuracy: 0.9959 - val_loss: 0.3334 - val_wine_quality_loss: 0.3035 - val_wine_type_loss: 0.0295 - val_wine_quality_root_mean_squared_error: 0.5509 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 88/180\n",
      "3155/3155 [==============================] - 0s 95us/sample - loss: 0.3075 - wine_quality_loss: 0.2850 - wine_type_loss: 0.0230 - wine_quality_root_mean_squared_error: 0.5333 - wine_type_accuracy: 0.9959 - val_loss: 0.3368 - val_wine_quality_loss: 0.3064 - val_wine_type_loss: 0.0295 - val_wine_quality_root_mean_squared_error: 0.5540 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 89/180\n",
      "3155/3155 [==============================] - 0s 97us/sample - loss: 0.3044 - wine_quality_loss: 0.2819 - wine_type_loss: 0.0229 - wine_quality_root_mean_squared_error: 0.5305 - wine_type_accuracy: 0.9959 - val_loss: 0.3633 - val_wine_quality_loss: 0.3331 - val_wine_type_loss: 0.0294 - val_wine_quality_root_mean_squared_error: 0.5775 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 90/180\n",
      "3155/3155 [==============================] - 0s 94us/sample - loss: 0.3072 - wine_quality_loss: 0.2843 - wine_type_loss: 0.0228 - wine_quality_root_mean_squared_error: 0.5332 - wine_type_accuracy: 0.9959 - val_loss: 0.3424 - val_wine_quality_loss: 0.3122 - val_wine_type_loss: 0.0294 - val_wine_quality_root_mean_squared_error: 0.5592 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 91/180\n",
      "3155/3155 [==============================] - 0s 95us/sample - loss: 0.3047 - wine_quality_loss: 0.2819 - wine_type_loss: 0.0227 - wine_quality_root_mean_squared_error: 0.5310 - wine_type_accuracy: 0.9959 - val_loss: 0.3345 - val_wine_quality_loss: 0.3048 - val_wine_type_loss: 0.0293 - val_wine_quality_root_mean_squared_error: 0.5520 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 92/180\n",
      "3155/3155 [==============================] - 0s 94us/sample - loss: 0.3043 - wine_quality_loss: 0.2814 - wine_type_loss: 0.0226 - wine_quality_root_mean_squared_error: 0.5307 - wine_type_accuracy: 0.9959 - val_loss: 0.3466 - val_wine_quality_loss: 0.3167 - val_wine_type_loss: 0.0293 - val_wine_quality_root_mean_squared_error: 0.5630 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 93/180\n",
      "3155/3155 [==============================] - 0s 96us/sample - loss: 0.3051 - wine_quality_loss: 0.2829 - wine_type_loss: 0.0225 - wine_quality_root_mean_squared_error: 0.5315 - wine_type_accuracy: 0.9959 - val_loss: 0.3316 - val_wine_quality_loss: 0.3017 - val_wine_type_loss: 0.0293 - val_wine_quality_root_mean_squared_error: 0.5495 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 94/180\n",
      "3155/3155 [==============================] - 0s 95us/sample - loss: 0.3037 - wine_quality_loss: 0.2815 - wine_type_loss: 0.0224 - wine_quality_root_mean_squared_error: 0.5303 - wine_type_accuracy: 0.9959 - val_loss: 0.3355 - val_wine_quality_loss: 0.3059 - val_wine_type_loss: 0.0291 - val_wine_quality_root_mean_squared_error: 0.5532 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 95/180\n",
      "3155/3155 [==============================] - 0s 109us/sample - loss: 0.3029 - wine_quality_loss: 0.2807 - wine_type_loss: 0.0222 - wine_quality_root_mean_squared_error: 0.5297 - wine_type_accuracy: 0.9959 - val_loss: 0.3432 - val_wine_quality_loss: 0.3132 - val_wine_type_loss: 0.0292 - val_wine_quality_root_mean_squared_error: 0.5600 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 96/180\n",
      "3155/3155 [==============================] - 0s 95us/sample - loss: 0.3024 - wine_quality_loss: 0.2797 - wine_type_loss: 0.0222 - wine_quality_root_mean_squared_error: 0.5293 - wine_type_accuracy: 0.9959 - val_loss: 0.3354 - val_wine_quality_loss: 0.3056 - val_wine_type_loss: 0.0291 - val_wine_quality_root_mean_squared_error: 0.5532 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 97/180\n",
      "3155/3155 [==============================] - 0s 80us/sample - loss: 0.3028 - wine_quality_loss: 0.2808 - wine_type_loss: 0.0222 - wine_quality_root_mean_squared_error: 0.5297 - wine_type_accuracy: 0.9959 - val_loss: 0.3349 - val_wine_quality_loss: 0.3053 - val_wine_type_loss: 0.0290 - val_wine_quality_root_mean_squared_error: 0.5527 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 98/180\n",
      "3155/3155 [==============================] - 0s 83us/sample - loss: 0.3015 - wine_quality_loss: 0.2797 - wine_type_loss: 0.0219 - wine_quality_root_mean_squared_error: 0.5287 - wine_type_accuracy: 0.9959 - val_loss: 0.3321 - val_wine_quality_loss: 0.3026 - val_wine_type_loss: 0.0291 - val_wine_quality_root_mean_squared_error: 0.5502 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 99/180\n",
      "3155/3155 [==============================] - 0s 94us/sample - loss: 0.3003 - wine_quality_loss: 0.2784 - wine_type_loss: 0.0218 - wine_quality_root_mean_squared_error: 0.5276 - wine_type_accuracy: 0.9959 - val_loss: 0.3358 - val_wine_quality_loss: 0.3063 - val_wine_type_loss: 0.0290 - val_wine_quality_root_mean_squared_error: 0.5536 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 100/180\n",
      "3155/3155 [==============================] - 0s 92us/sample - loss: 0.3001 - wine_quality_loss: 0.2788 - wine_type_loss: 0.0218 - wine_quality_root_mean_squared_error: 0.5275 - wine_type_accuracy: 0.9959 - val_loss: 0.3363 - val_wine_quality_loss: 0.3067 - val_wine_type_loss: 0.0289 - val_wine_quality_root_mean_squared_error: 0.5541 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 101/180\n",
      "3155/3155 [==============================] - 0s 96us/sample - loss: 0.2983 - wine_quality_loss: 0.2760 - wine_type_loss: 0.0217 - wine_quality_root_mean_squared_error: 0.5259 - wine_type_accuracy: 0.9959 - val_loss: 0.3355 - val_wine_quality_loss: 0.3061 - val_wine_type_loss: 0.0288 - val_wine_quality_root_mean_squared_error: 0.5535 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 102/180\n",
      "3155/3155 [==============================] - 0s 94us/sample - loss: 0.2985 - wine_quality_loss: 0.2770 - wine_type_loss: 0.0215 - wine_quality_root_mean_squared_error: 0.5262 - wine_type_accuracy: 0.9959 - val_loss: 0.3365 - val_wine_quality_loss: 0.3073 - val_wine_type_loss: 0.0289 - val_wine_quality_root_mean_squared_error: 0.5542 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 103/180\n",
      "3155/3155 [==============================] - 0s 95us/sample - loss: 0.2974 - wine_quality_loss: 0.2766 - wine_type_loss: 0.0215 - wine_quality_root_mean_squared_error: 0.5252 - wine_type_accuracy: 0.9959 - val_loss: 0.3327 - val_wine_quality_loss: 0.3035 - val_wine_type_loss: 0.0287 - val_wine_quality_root_mean_squared_error: 0.5510 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 104/180\n",
      "3155/3155 [==============================] - 0s 114us/sample - loss: 0.2975 - wine_quality_loss: 0.2764 - wine_type_loss: 0.0216 - wine_quality_root_mean_squared_error: 0.5255 - wine_type_accuracy: 0.9959 - val_loss: 0.3319 - val_wine_quality_loss: 0.3031 - val_wine_type_loss: 0.0287 - val_wine_quality_root_mean_squared_error: 0.5504 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 105/180\n",
      "3155/3155 [==============================] - 0s 94us/sample - loss: 0.2965 - wine_quality_loss: 0.2752 - wine_type_loss: 0.0212 - wine_quality_root_mean_squared_error: 0.5246 - wine_type_accuracy: 0.9959 - val_loss: 0.3328 - val_wine_quality_loss: 0.3037 - val_wine_type_loss: 0.0286 - val_wine_quality_root_mean_squared_error: 0.5512 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 106/180\n",
      "3155/3155 [==============================] - 0s 99us/sample - loss: 0.2963 - wine_quality_loss: 0.2748 - wine_type_loss: 0.0211 - wine_quality_root_mean_squared_error: 0.5244 - wine_type_accuracy: 0.9959 - val_loss: 0.3321 - val_wine_quality_loss: 0.3032 - val_wine_type_loss: 0.0285 - val_wine_quality_root_mean_squared_error: 0.5506 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 107/180\n",
      "3155/3155 [==============================] - 0s 93us/sample - loss: 0.2953 - wine_quality_loss: 0.2746 - wine_type_loss: 0.0211 - wine_quality_root_mean_squared_error: 0.5236 - wine_type_accuracy: 0.9959 - val_loss: 0.3425 - val_wine_quality_loss: 0.3133 - val_wine_type_loss: 0.0285 - val_wine_quality_root_mean_squared_error: 0.5601 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 108/180\n",
      "3155/3155 [==============================] - 0s 95us/sample - loss: 0.2964 - wine_quality_loss: 0.2749 - wine_type_loss: 0.0209 - wine_quality_root_mean_squared_error: 0.5247 - wine_type_accuracy: 0.9959 - val_loss: 0.3287 - val_wine_quality_loss: 0.2999 - val_wine_type_loss: 0.0284 - val_wine_quality_root_mean_squared_error: 0.5476 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 109/180\n",
      "3155/3155 [==============================] - 0s 90us/sample - loss: 0.2954 - wine_quality_loss: 0.2748 - wine_type_loss: 0.0208 - wine_quality_root_mean_squared_error: 0.5239 - wine_type_accuracy: 0.9959 - val_loss: 0.3340 - val_wine_quality_loss: 0.3053 - val_wine_type_loss: 0.0284 - val_wine_quality_root_mean_squared_error: 0.5525 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 110/180\n",
      "3155/3155 [==============================] - 0s 81us/sample - loss: 0.2938 - wine_quality_loss: 0.2730 - wine_type_loss: 0.0208 - wine_quality_root_mean_squared_error: 0.5224 - wine_type_accuracy: 0.9959 - val_loss: 0.3362 - val_wine_quality_loss: 0.3072 - val_wine_type_loss: 0.0284 - val_wine_quality_root_mean_squared_error: 0.5545 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 111/180\n",
      "3155/3155 [==============================] - 0s 97us/sample - loss: 0.2944 - wine_quality_loss: 0.2735 - wine_type_loss: 0.0207 - wine_quality_root_mean_squared_error: 0.5231 - wine_type_accuracy: 0.9959 - val_loss: 0.3390 - val_wine_quality_loss: 0.3098 - val_wine_type_loss: 0.0284 - val_wine_quality_root_mean_squared_error: 0.5570 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 112/180\n",
      "3155/3155 [==============================] - 0s 79us/sample - loss: 0.2927 - wine_quality_loss: 0.2722 - wine_type_loss: 0.0205 - wine_quality_root_mean_squared_error: 0.5216 - wine_type_accuracy: 0.9959 - val_loss: 0.3336 - val_wine_quality_loss: 0.3048 - val_wine_type_loss: 0.0285 - val_wine_quality_root_mean_squared_error: 0.5521 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 113/180\n",
      "3155/3155 [==============================] - 0s 94us/sample - loss: 0.2923 - wine_quality_loss: 0.2721 - wine_type_loss: 0.0229 - wine_quality_root_mean_squared_error: 0.5213 - wine_type_accuracy: 0.9959 - val_loss: 0.3304 - val_wine_quality_loss: 0.3018 - val_wine_type_loss: 0.0284 - val_wine_quality_root_mean_squared_error: 0.5493 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 114/180\n",
      "3155/3155 [==============================] - 0s 94us/sample - loss: 0.2915 - wine_quality_loss: 0.2710 - wine_type_loss: 0.0204 - wine_quality_root_mean_squared_error: 0.5206 - wine_type_accuracy: 0.9959 - val_loss: 0.3377 - val_wine_quality_loss: 0.3085 - val_wine_type_loss: 0.0283 - val_wine_quality_root_mean_squared_error: 0.5559 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 115/180\n",
      "3155/3155 [==============================] - 0s 95us/sample - loss: 0.2915 - wine_quality_loss: 0.2713 - wine_type_loss: 0.0203 - wine_quality_root_mean_squared_error: 0.5208 - wine_type_accuracy: 0.9959 - val_loss: 0.3381 - val_wine_quality_loss: 0.3097 - val_wine_type_loss: 0.0282 - val_wine_quality_root_mean_squared_error: 0.5563 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 116/180\n",
      "3155/3155 [==============================] - 0s 95us/sample - loss: 0.2902 - wine_quality_loss: 0.2702 - wine_type_loss: 0.0202 - wine_quality_root_mean_squared_error: 0.5196 - wine_type_accuracy: 0.9959 - val_loss: 0.3294 - val_wine_quality_loss: 0.3009 - val_wine_type_loss: 0.0282 - val_wine_quality_root_mean_squared_error: 0.5485 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 117/180\n",
      "3155/3155 [==============================] - 0s 95us/sample - loss: 0.2900 - wine_quality_loss: 0.2697 - wine_type_loss: 0.0201 - wine_quality_root_mean_squared_error: 0.5195 - wine_type_accuracy: 0.9959 - val_loss: 0.3335 - val_wine_quality_loss: 0.3049 - val_wine_type_loss: 0.0281 - val_wine_quality_root_mean_squared_error: 0.5523 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 118/180\n",
      "3155/3155 [==============================] - 0s 94us/sample - loss: 0.2896 - wine_quality_loss: 0.2701 - wine_type_loss: 0.0200 - wine_quality_root_mean_squared_error: 0.5192 - wine_type_accuracy: 0.9959 - val_loss: 0.3337 - val_wine_quality_loss: 0.3051 - val_wine_type_loss: 0.0281 - val_wine_quality_root_mean_squared_error: 0.5525 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 119/180\n",
      "3155/3155 [==============================] - 0s 95us/sample - loss: 0.2892 - wine_quality_loss: 0.2693 - wine_type_loss: 0.0199 - wine_quality_root_mean_squared_error: 0.5189 - wine_type_accuracy: 0.9959 - val_loss: 0.3317 - val_wine_quality_loss: 0.3034 - val_wine_type_loss: 0.0280 - val_wine_quality_root_mean_squared_error: 0.5507 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 120/180\n",
      "3155/3155 [==============================] - 0s 96us/sample - loss: 0.2888 - wine_quality_loss: 0.2685 - wine_type_loss: 0.0198 - wine_quality_root_mean_squared_error: 0.5186 - wine_type_accuracy: 0.9959 - val_loss: 0.3275 - val_wine_quality_loss: 0.2992 - val_wine_type_loss: 0.0280 - val_wine_quality_root_mean_squared_error: 0.5470 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 121/180\n",
      "3155/3155 [==============================] - 0s 95us/sample - loss: 0.2883 - wine_quality_loss: 0.2681 - wine_type_loss: 0.0198 - wine_quality_root_mean_squared_error: 0.5181 - wine_type_accuracy: 0.9959 - val_loss: 0.3306 - val_wine_quality_loss: 0.3022 - val_wine_type_loss: 0.0279 - val_wine_quality_root_mean_squared_error: 0.5499 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 122/180\n",
      "3155/3155 [==============================] - 0s 96us/sample - loss: 0.2870 - wine_quality_loss: 0.2681 - wine_type_loss: 0.0197 - wine_quality_root_mean_squared_error: 0.5170 - wine_type_accuracy: 0.9959 - val_loss: 0.3374 - val_wine_quality_loss: 0.3092 - val_wine_type_loss: 0.0278 - val_wine_quality_root_mean_squared_error: 0.5561 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 123/180\n",
      "3155/3155 [==============================] - 0s 93us/sample - loss: 0.2877 - wine_quality_loss: 0.2678 - wine_type_loss: 0.0196 - wine_quality_root_mean_squared_error: 0.5177 - wine_type_accuracy: 0.9959 - val_loss: 0.3308 - val_wine_quality_loss: 0.3025 - val_wine_type_loss: 0.0279 - val_wine_quality_root_mean_squared_error: 0.5501 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 124/180\n",
      "3155/3155 [==============================] - 0s 94us/sample - loss: 0.2866 - wine_quality_loss: 0.2671 - wine_type_loss: 0.0195 - wine_quality_root_mean_squared_error: 0.5168 - wine_type_accuracy: 0.9959 - val_loss: 0.3341 - val_wine_quality_loss: 0.3056 - val_wine_type_loss: 0.0278 - val_wine_quality_root_mean_squared_error: 0.5531 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 125/180\n",
      "3155/3155 [==============================] - 0s 95us/sample - loss: 0.2869 - wine_quality_loss: 0.2673 - wine_type_loss: 0.0194 - wine_quality_root_mean_squared_error: 0.5171 - wine_type_accuracy: 0.9959 - val_loss: 0.3369 - val_wine_quality_loss: 0.3087 - val_wine_type_loss: 0.0278 - val_wine_quality_root_mean_squared_error: 0.5556 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 126/180\n",
      "3155/3155 [==============================] - 0s 95us/sample - loss: 0.2852 - wine_quality_loss: 0.2662 - wine_type_loss: 0.0193 - wine_quality_root_mean_squared_error: 0.5156 - wine_type_accuracy: 0.9959 - val_loss: 0.3326 - val_wine_quality_loss: 0.3044 - val_wine_type_loss: 0.0278 - val_wine_quality_root_mean_squared_error: 0.5518 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 127/180\n",
      "3155/3155 [==============================] - 0s 94us/sample - loss: 0.2854 - wine_quality_loss: 0.2659 - wine_type_loss: 0.0193 - wine_quality_root_mean_squared_error: 0.5159 - wine_type_accuracy: 0.9959 - val_loss: 0.3335 - val_wine_quality_loss: 0.3053 - val_wine_type_loss: 0.0277 - val_wine_quality_root_mean_squared_error: 0.5526 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 128/180\n",
      "3155/3155 [==============================] - 0s 95us/sample - loss: 0.2851 - wine_quality_loss: 0.2663 - wine_type_loss: 0.0193 - wine_quality_root_mean_squared_error: 0.5156 - wine_type_accuracy: 0.9959 - val_loss: 0.3333 - val_wine_quality_loss: 0.3050 - val_wine_type_loss: 0.0277 - val_wine_quality_root_mean_squared_error: 0.5525 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 129/180\n",
      "3155/3155 [==============================] - 0s 95us/sample - loss: 0.2837 - wine_quality_loss: 0.2644 - wine_type_loss: 0.0191 - wine_quality_root_mean_squared_error: 0.5143 - wine_type_accuracy: 0.9959 - val_loss: 0.3332 - val_wine_quality_loss: 0.3051 - val_wine_type_loss: 0.0276 - val_wine_quality_root_mean_squared_error: 0.5524 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 130/180\n",
      "3155/3155 [==============================] - 0s 95us/sample - loss: 0.2838 - wine_quality_loss: 0.2647 - wine_type_loss: 0.0190 - wine_quality_root_mean_squared_error: 0.5145 - wine_type_accuracy: 0.9959 - val_loss: 0.3346 - val_wine_quality_loss: 0.3065 - val_wine_type_loss: 0.0276 - val_wine_quality_root_mean_squared_error: 0.5537 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 131/180\n",
      "3155/3155 [==============================] - 0s 96us/sample - loss: 0.2837 - wine_quality_loss: 0.2644 - wine_type_loss: 0.0190 - wine_quality_root_mean_squared_error: 0.5145 - wine_type_accuracy: 0.9962 - val_loss: 0.3301 - val_wine_quality_loss: 0.3023 - val_wine_type_loss: 0.0275 - val_wine_quality_root_mean_squared_error: 0.5498 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 132/180\n",
      "3155/3155 [==============================] - 0s 95us/sample - loss: 0.2826 - wine_quality_loss: 0.2637 - wine_type_loss: 0.0189 - wine_quality_root_mean_squared_error: 0.5134 - wine_type_accuracy: 0.9962 - val_loss: 0.3280 - val_wine_quality_loss: 0.3001 - val_wine_type_loss: 0.0275 - val_wine_quality_root_mean_squared_error: 0.5479 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 133/180\n",
      "3155/3155 [==============================] - 0s 94us/sample - loss: 0.2822 - wine_quality_loss: 0.2635 - wine_type_loss: 0.0188 - wine_quality_root_mean_squared_error: 0.5132 - wine_type_accuracy: 0.9959 - val_loss: 0.3378 - val_wine_quality_loss: 0.3098 - val_wine_type_loss: 0.0275 - val_wine_quality_root_mean_squared_error: 0.5567 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 134/180\n",
      "3155/3155 [==============================] - 0s 94us/sample - loss: 0.2810 - wine_quality_loss: 0.2626 - wine_type_loss: 0.0187 - wine_quality_root_mean_squared_error: 0.5121 - wine_type_accuracy: 0.9962 - val_loss: 0.3306 - val_wine_quality_loss: 0.3027 - val_wine_type_loss: 0.0275 - val_wine_quality_root_mean_squared_error: 0.5503 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 135/180\n",
      "3155/3155 [==============================] - 0s 97us/sample - loss: 0.2812 - wine_quality_loss: 0.2625 - wine_type_loss: 0.0187 - wine_quality_root_mean_squared_error: 0.5123 - wine_type_accuracy: 0.9962 - val_loss: 0.3407 - val_wine_quality_loss: 0.3129 - val_wine_type_loss: 0.0276 - val_wine_quality_root_mean_squared_error: 0.5592 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 136/180\n",
      "3155/3155 [==============================] - 0s 95us/sample - loss: 0.2812 - wine_quality_loss: 0.2630 - wine_type_loss: 0.0185 - wine_quality_root_mean_squared_error: 0.5124 - wine_type_accuracy: 0.9962 - val_loss: 0.3303 - val_wine_quality_loss: 0.3022 - val_wine_type_loss: 0.0274 - val_wine_quality_root_mean_squared_error: 0.5500 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 137/180\n",
      "3155/3155 [==============================] - 0s 96us/sample - loss: 0.2799 - wine_quality_loss: 0.2615 - wine_type_loss: 0.0188 - wine_quality_root_mean_squared_error: 0.5113 - wine_type_accuracy: 0.9962 - val_loss: 0.3334 - val_wine_quality_loss: 0.3056 - val_wine_type_loss: 0.0274 - val_wine_quality_root_mean_squared_error: 0.5529 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 138/180\n",
      "3155/3155 [==============================] - 0s 93us/sample - loss: 0.2798 - wine_quality_loss: 0.2615 - wine_type_loss: 0.0184 - wine_quality_root_mean_squared_error: 0.5112 - wine_type_accuracy: 0.9962 - val_loss: 0.3383 - val_wine_quality_loss: 0.3102 - val_wine_type_loss: 0.0274 - val_wine_quality_root_mean_squared_error: 0.5573 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 139/180\n",
      "3155/3155 [==============================] - 0s 94us/sample - loss: 0.2801 - wine_quality_loss: 0.2614 - wine_type_loss: 0.0184 - wine_quality_root_mean_squared_error: 0.5116 - wine_type_accuracy: 0.9962 - val_loss: 0.3296 - val_wine_quality_loss: 0.3018 - val_wine_type_loss: 0.0274 - val_wine_quality_root_mean_squared_error: 0.5495 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 140/180\n",
      "3155/3155 [==============================] - 0s 96us/sample - loss: 0.2802 - wine_quality_loss: 0.2613 - wine_type_loss: 0.0184 - wine_quality_root_mean_squared_error: 0.5117 - wine_type_accuracy: 0.9962 - val_loss: 0.3363 - val_wine_quality_loss: 0.3084 - val_wine_type_loss: 0.0273 - val_wine_quality_root_mean_squared_error: 0.5556 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 141/180\n",
      "3155/3155 [==============================] - 0s 94us/sample - loss: 0.2790 - wine_quality_loss: 0.2608 - wine_type_loss: 0.0182 - wine_quality_root_mean_squared_error: 0.5106 - wine_type_accuracy: 0.9962 - val_loss: 0.3318 - val_wine_quality_loss: 0.3041 - val_wine_type_loss: 0.0273 - val_wine_quality_root_mean_squared_error: 0.5515 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 142/180\n",
      "3155/3155 [==============================] - 0s 95us/sample - loss: 0.2777 - wine_quality_loss: 0.2594 - wine_type_loss: 0.0188 - wine_quality_root_mean_squared_error: 0.5094 - wine_type_accuracy: 0.9962 - val_loss: 0.3337 - val_wine_quality_loss: 0.3060 - val_wine_type_loss: 0.0273 - val_wine_quality_root_mean_squared_error: 0.5532 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 143/180\n",
      "3155/3155 [==============================] - 0s 94us/sample - loss: 0.2771 - wine_quality_loss: 0.2589 - wine_type_loss: 0.0181 - wine_quality_root_mean_squared_error: 0.5089 - wine_type_accuracy: 0.9962 - val_loss: 0.3410 - val_wine_quality_loss: 0.3130 - val_wine_type_loss: 0.0273 - val_wine_quality_root_mean_squared_error: 0.5598 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 144/180\n",
      "3155/3155 [==============================] - 0s 98us/sample - loss: 0.2776 - wine_quality_loss: 0.2594 - wine_type_loss: 0.0180 - wine_quality_root_mean_squared_error: 0.5094 - wine_type_accuracy: 0.9962 - val_loss: 0.3347 - val_wine_quality_loss: 0.3071 - val_wine_type_loss: 0.0272 - val_wine_quality_root_mean_squared_error: 0.5542 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 145/180\n",
      "3155/3155 [==============================] - 0s 94us/sample - loss: 0.2763 - wine_quality_loss: 0.2580 - wine_type_loss: 0.0180 - wine_quality_root_mean_squared_error: 0.5082 - wine_type_accuracy: 0.9962 - val_loss: 0.3299 - val_wine_quality_loss: 0.3026 - val_wine_type_loss: 0.0272 - val_wine_quality_root_mean_squared_error: 0.5499 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 146/180\n",
      "3155/3155 [==============================] - 0s 95us/sample - loss: 0.2760 - wine_quality_loss: 0.2584 - wine_type_loss: 0.0178 - wine_quality_root_mean_squared_error: 0.5080 - wine_type_accuracy: 0.9962 - val_loss: 0.3330 - val_wine_quality_loss: 0.3055 - val_wine_type_loss: 0.0272 - val_wine_quality_root_mean_squared_error: 0.5527 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 147/180\n",
      "3155/3155 [==============================] - 0s 97us/sample - loss: 0.2761 - wine_quality_loss: 0.2580 - wine_type_loss: 0.0178 - wine_quality_root_mean_squared_error: 0.5081 - wine_type_accuracy: 0.9962 - val_loss: 0.3317 - val_wine_quality_loss: 0.3042 - val_wine_type_loss: 0.0272 - val_wine_quality_root_mean_squared_error: 0.5515 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 148/180\n",
      "3155/3155 [==============================] - 0s 93us/sample - loss: 0.2754 - wine_quality_loss: 0.2575 - wine_type_loss: 0.0177 - wine_quality_root_mean_squared_error: 0.5076 - wine_type_accuracy: 0.9962 - val_loss: 0.3333 - val_wine_quality_loss: 0.3060 - val_wine_type_loss: 0.0272 - val_wine_quality_root_mean_squared_error: 0.5529 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 149/180\n",
      "3155/3155 [==============================] - 0s 96us/sample - loss: 0.2755 - wine_quality_loss: 0.2573 - wine_type_loss: 0.0177 - wine_quality_root_mean_squared_error: 0.5077 - wine_type_accuracy: 0.9962 - val_loss: 0.3339 - val_wine_quality_loss: 0.3062 - val_wine_type_loss: 0.0271 - val_wine_quality_root_mean_squared_error: 0.5535 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 150/180\n",
      "3155/3155 [==============================] - 0s 96us/sample - loss: 0.2750 - wine_quality_loss: 0.2577 - wine_type_loss: 0.0176 - wine_quality_root_mean_squared_error: 0.5073 - wine_type_accuracy: 0.9962 - val_loss: 0.3301 - val_wine_quality_loss: 0.3026 - val_wine_type_loss: 0.0272 - val_wine_quality_root_mean_squared_error: 0.5500 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 151/180\n",
      "3155/3155 [==============================] - 0s 96us/sample - loss: 0.2741 - wine_quality_loss: 0.2565 - wine_type_loss: 0.0175 - wine_quality_root_mean_squared_error: 0.5065 - wine_type_accuracy: 0.9962 - val_loss: 0.3305 - val_wine_quality_loss: 0.3032 - val_wine_type_loss: 0.0272 - val_wine_quality_root_mean_squared_error: 0.5505 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 152/180\n",
      "3155/3155 [==============================] - 0s 95us/sample - loss: 0.2733 - wine_quality_loss: 0.2560 - wine_type_loss: 0.0175 - wine_quality_root_mean_squared_error: 0.5057 - wine_type_accuracy: 0.9962 - val_loss: 0.3324 - val_wine_quality_loss: 0.3050 - val_wine_type_loss: 0.0270 - val_wine_quality_root_mean_squared_error: 0.5523 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 153/180\n",
      "3155/3155 [==============================] - 0s 93us/sample - loss: 0.2736 - wine_quality_loss: 0.2563 - wine_type_loss: 0.0173 - wine_quality_root_mean_squared_error: 0.5062 - wine_type_accuracy: 0.9962 - val_loss: 0.3363 - val_wine_quality_loss: 0.3088 - val_wine_type_loss: 0.0271 - val_wine_quality_root_mean_squared_error: 0.5557 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 154/180\n",
      "3155/3155 [==============================] - 0s 94us/sample - loss: 0.2732 - wine_quality_loss: 0.2560 - wine_type_loss: 0.0173 - wine_quality_root_mean_squared_error: 0.5058 - wine_type_accuracy: 0.9962 - val_loss: 0.3303 - val_wine_quality_loss: 0.3030 - val_wine_type_loss: 0.0270 - val_wine_quality_root_mean_squared_error: 0.5504 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 155/180\n",
      "3155/3155 [==============================] - 0s 80us/sample - loss: 0.2719 - wine_quality_loss: 0.2545 - wine_type_loss: 0.0172 - wine_quality_root_mean_squared_error: 0.5046 - wine_type_accuracy: 0.9962 - val_loss: 0.3315 - val_wine_quality_loss: 0.3041 - val_wine_type_loss: 0.0271 - val_wine_quality_root_mean_squared_error: 0.5514 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 156/180\n",
      "3155/3155 [==============================] - 0s 94us/sample - loss: 0.2719 - wine_quality_loss: 0.2544 - wine_type_loss: 0.0172 - wine_quality_root_mean_squared_error: 0.5046 - wine_type_accuracy: 0.9962 - val_loss: 0.3424 - val_wine_quality_loss: 0.3150 - val_wine_type_loss: 0.0270 - val_wine_quality_root_mean_squared_error: 0.5613 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 157/180\n",
      "3155/3155 [==============================] - 0s 93us/sample - loss: 0.2717 - wine_quality_loss: 0.2547 - wine_type_loss: 0.0171 - wine_quality_root_mean_squared_error: 0.5045 - wine_type_accuracy: 0.9962 - val_loss: 0.3395 - val_wine_quality_loss: 0.3118 - val_wine_type_loss: 0.0271 - val_wine_quality_root_mean_squared_error: 0.5586 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 158/180\n",
      "3155/3155 [==============================] - 0s 96us/sample - loss: 0.2704 - wine_quality_loss: 0.2531 - wine_type_loss: 0.0172 - wine_quality_root_mean_squared_error: 0.5033 - wine_type_accuracy: 0.9962 - val_loss: 0.3307 - val_wine_quality_loss: 0.3034 - val_wine_type_loss: 0.0271 - val_wine_quality_root_mean_squared_error: 0.5507 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 159/180\n",
      "3155/3155 [==============================] - 0s 96us/sample - loss: 0.2701 - wine_quality_loss: 0.2529 - wine_type_loss: 0.0170 - wine_quality_root_mean_squared_error: 0.5030 - wine_type_accuracy: 0.9962 - val_loss: 0.3409 - val_wine_quality_loss: 0.3135 - val_wine_type_loss: 0.0271 - val_wine_quality_root_mean_squared_error: 0.5599 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 160/180\n",
      "3155/3155 [==============================] - 0s 95us/sample - loss: 0.2696 - wine_quality_loss: 0.2525 - wine_type_loss: 0.0170 - wine_quality_root_mean_squared_error: 0.5026 - wine_type_accuracy: 0.9962 - val_loss: 0.3303 - val_wine_quality_loss: 0.3031 - val_wine_type_loss: 0.0270 - val_wine_quality_root_mean_squared_error: 0.5504 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 161/180\n",
      "3155/3155 [==============================] - 0s 111us/sample - loss: 0.2697 - wine_quality_loss: 0.2526 - wine_type_loss: 0.0176 - wine_quality_root_mean_squared_error: 0.5028 - wine_type_accuracy: 0.9962 - val_loss: 0.3384 - val_wine_quality_loss: 0.3108 - val_wine_type_loss: 0.0270 - val_wine_quality_root_mean_squared_error: 0.5577 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 162/180\n",
      "3155/3155 [==============================] - 0s 79us/sample - loss: 0.2699 - wine_quality_loss: 0.2533 - wine_type_loss: 0.0168 - wine_quality_root_mean_squared_error: 0.5031 - wine_type_accuracy: 0.9962 - val_loss: 0.3429 - val_wine_quality_loss: 0.3154 - val_wine_type_loss: 0.0270 - val_wine_quality_root_mean_squared_error: 0.5618 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 163/180\n",
      "3155/3155 [==============================] - 0s 96us/sample - loss: 0.2690 - wine_quality_loss: 0.2525 - wine_type_loss: 0.0167 - wine_quality_root_mean_squared_error: 0.5022 - wine_type_accuracy: 0.9962 - val_loss: 0.3382 - val_wine_quality_loss: 0.3109 - val_wine_type_loss: 0.0269 - val_wine_quality_root_mean_squared_error: 0.5576 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 164/180\n",
      "3155/3155 [==============================] - 0s 78us/sample - loss: 0.2699 - wine_quality_loss: 0.2530 - wine_type_loss: 0.0167 - wine_quality_root_mean_squared_error: 0.5031 - wine_type_accuracy: 0.9962 - val_loss: 0.3442 - val_wine_quality_loss: 0.3170 - val_wine_type_loss: 0.0269 - val_wine_quality_root_mean_squared_error: 0.5630 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 165/180\n",
      "3155/3155 [==============================] - 0s 94us/sample - loss: 0.2684 - wine_quality_loss: 0.2520 - wine_type_loss: 0.0166 - wine_quality_root_mean_squared_error: 0.5018 - wine_type_accuracy: 0.9962 - val_loss: 0.3375 - val_wine_quality_loss: 0.3103 - val_wine_type_loss: 0.0270 - val_wine_quality_root_mean_squared_error: 0.5569 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 166/180\n",
      "3155/3155 [==============================] - 0s 95us/sample - loss: 0.2676 - wine_quality_loss: 0.2510 - wine_type_loss: 0.0166 - wine_quality_root_mean_squared_error: 0.5009 - wine_type_accuracy: 0.9962 - val_loss: 0.3414 - val_wine_quality_loss: 0.3139 - val_wine_type_loss: 0.0269 - val_wine_quality_root_mean_squared_error: 0.5604 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 167/180\n",
      "3155/3155 [==============================] - 0s 94us/sample - loss: 0.2683 - wine_quality_loss: 0.2515 - wine_type_loss: 0.0165 - wine_quality_root_mean_squared_error: 0.5018 - wine_type_accuracy: 0.9962 - val_loss: 0.3347 - val_wine_quality_loss: 0.3075 - val_wine_type_loss: 0.0269 - val_wine_quality_root_mean_squared_error: 0.5545 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 168/180\n",
      "3155/3155 [==============================] - 0s 96us/sample - loss: 0.2671 - wine_quality_loss: 0.2504 - wine_type_loss: 0.0164 - wine_quality_root_mean_squared_error: 0.5006 - wine_type_accuracy: 0.9962 - val_loss: 0.3396 - val_wine_quality_loss: 0.3121 - val_wine_type_loss: 0.0269 - val_wine_quality_root_mean_squared_error: 0.5588 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 169/180\n",
      "3155/3155 [==============================] - 0s 95us/sample - loss: 0.2665 - wine_quality_loss: 0.2497 - wine_type_loss: 0.0164 - wine_quality_root_mean_squared_error: 0.5000 - wine_type_accuracy: 0.9962 - val_loss: 0.3317 - val_wine_quality_loss: 0.3043 - val_wine_type_loss: 0.0269 - val_wine_quality_root_mean_squared_error: 0.5518 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 170/180\n",
      "3155/3155 [==============================] - 0s 94us/sample - loss: 0.2667 - wine_quality_loss: 0.2503 - wine_type_loss: 0.0163 - wine_quality_root_mean_squared_error: 0.5003 - wine_type_accuracy: 0.9962 - val_loss: 0.3384 - val_wine_quality_loss: 0.3108 - val_wine_type_loss: 0.0269 - val_wine_quality_root_mean_squared_error: 0.5578 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 171/180\n",
      "3155/3155 [==============================] - 0s 96us/sample - loss: 0.2663 - wine_quality_loss: 0.2495 - wine_type_loss: 0.0172 - wine_quality_root_mean_squared_error: 0.4999 - wine_type_accuracy: 0.9962 - val_loss: 0.3351 - val_wine_quality_loss: 0.3078 - val_wine_type_loss: 0.0270 - val_wine_quality_root_mean_squared_error: 0.5548 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 172/180\n",
      "3155/3155 [==============================] - 0s 94us/sample - loss: 0.2650 - wine_quality_loss: 0.2486 - wine_type_loss: 0.0162 - wine_quality_root_mean_squared_error: 0.4988 - wine_type_accuracy: 0.9962 - val_loss: 0.3505 - val_wine_quality_loss: 0.3230 - val_wine_type_loss: 0.0270 - val_wine_quality_root_mean_squared_error: 0.5684 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 173/180\n",
      "3155/3155 [==============================] - 0s 96us/sample - loss: 0.2662 - wine_quality_loss: 0.2502 - wine_type_loss: 0.0161 - wine_quality_root_mean_squared_error: 0.5000 - wine_type_accuracy: 0.9962 - val_loss: 0.3351 - val_wine_quality_loss: 0.3079 - val_wine_type_loss: 0.0270 - val_wine_quality_root_mean_squared_error: 0.5547 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 174/180\n",
      "3155/3155 [==============================] - 0s 95us/sample - loss: 0.2649 - wine_quality_loss: 0.2486 - wine_type_loss: 0.0161 - wine_quality_root_mean_squared_error: 0.4987 - wine_type_accuracy: 0.9962 - val_loss: 0.3343 - val_wine_quality_loss: 0.3071 - val_wine_type_loss: 0.0270 - val_wine_quality_root_mean_squared_error: 0.5541 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 175/180\n",
      "3155/3155 [==============================] - 0s 96us/sample - loss: 0.2655 - wine_quality_loss: 0.2499 - wine_type_loss: 0.0161 - wine_quality_root_mean_squared_error: 0.4994 - wine_type_accuracy: 0.9962 - val_loss: 0.3404 - val_wine_quality_loss: 0.3130 - val_wine_type_loss: 0.0270 - val_wine_quality_root_mean_squared_error: 0.5595 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 176/180\n",
      "3155/3155 [==============================] - 0s 110us/sample - loss: 0.2646 - wine_quality_loss: 0.2497 - wine_type_loss: 0.0160 - wine_quality_root_mean_squared_error: 0.4986 - wine_type_accuracy: 0.9962 - val_loss: 0.3336 - val_wine_quality_loss: 0.3062 - val_wine_type_loss: 0.0269 - val_wine_quality_root_mean_squared_error: 0.5535 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 177/180\n",
      "3155/3155 [==============================] - 0s 95us/sample - loss: 0.2638 - wine_quality_loss: 0.2477 - wine_type_loss: 0.0166 - wine_quality_root_mean_squared_error: 0.4978 - wine_type_accuracy: 0.9962 - val_loss: 0.3324 - val_wine_quality_loss: 0.3053 - val_wine_type_loss: 0.0269 - val_wine_quality_root_mean_squared_error: 0.5524 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 178/180\n",
      "3155/3155 [==============================] - 0s 80us/sample - loss: 0.2638 - wine_quality_loss: 0.2478 - wine_type_loss: 0.0159 - wine_quality_root_mean_squared_error: 0.4978 - wine_type_accuracy: 0.9962 - val_loss: 0.3392 - val_wine_quality_loss: 0.3118 - val_wine_type_loss: 0.0269 - val_wine_quality_root_mean_squared_error: 0.5585 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 179/180\n",
      "3155/3155 [==============================] - 0s 94us/sample - loss: 0.2637 - wine_quality_loss: 0.2475 - wine_type_loss: 0.0158 - wine_quality_root_mean_squared_error: 0.4979 - wine_type_accuracy: 0.9962 - val_loss: 0.3334 - val_wine_quality_loss: 0.3062 - val_wine_type_loss: 0.0269 - val_wine_quality_root_mean_squared_error: 0.5533 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 180/180\n",
      "3155/3155 [==============================] - 0s 94us/sample - loss: 0.2628 - wine_quality_loss: 0.2469 - wine_type_loss: 0.0157 - wine_quality_root_mean_squared_error: 0.4970 - wine_type_accuracy: 0.9962 - val_loss: 0.3341 - val_wine_quality_loss: 0.3068 - val_wine_type_loss: 0.0269 - val_wine_quality_root_mean_squared_error: 0.5539 - val_wine_type_accuracy: 0.9949\n"
     ]
    }
   ],
   "source": [
    "# Please uncomment all lines in this cell and replace those marked with `# YOUR CODE HERE`.\n",
    "# You can select all lines in this code cell with Ctrl+A (Windows/Linux) or Cmd+A (Mac), then press Ctrl+/ (Windows/Linux) or Cmd+/ (Mac) to uncomment.\n",
    "\n",
    "\n",
    "\n",
    "history = model.fit(norm_train_X, train_Y,\n",
    "                    epochs = 180, validation_data=(norm_val_X, val_Y))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 144,
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "code",
     "checksum": "fadad8896eda9c8c2115970724b15508",
     "grade": true,
     "grade_id": "cell-eb4d5b41bef8f0ab",
     "locked": true,
     "points": 1,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[92m All public tests passed\n"
     ]
    }
   ],
   "source": [
    "utils.test_history(history)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 145,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "CubF2J2gSf6q"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "789/789 [==============================] - 0s 21us/sample - loss: 0.3341 - wine_quality_loss: 0.3068 - wine_type_loss: 0.0269 - wine_quality_root_mean_squared_error: 0.5539 - wine_type_accuracy: 0.9949\n",
      "\n",
      "loss: 0.3340678883596065\n",
      "wine_quality_loss: 0.30675745010375977\n",
      "wine_type_loss: 0.026864921674132347\n",
      "wine_quality_rmse: 0.553941547870636\n",
      "wine_type_accuracy: 0.9949302673339844\n"
     ]
    }
   ],
   "source": [
    "# Gather the training metrics\n",
    "loss, wine_quality_loss, wine_type_loss, wine_quality_rmse, wine_type_accuracy = model.evaluate(x=norm_val_X, y=val_Y)\n",
    "\n",
    "print()\n",
    "print(f'loss: {loss}')\n",
    "print(f'wine_quality_loss: {wine_quality_loss}')\n",
    "print(f'wine_type_loss: {wine_type_loss}')\n",
    "print(f'wine_quality_rmse: {wine_quality_rmse}')\n",
    "print(f'wine_type_accuracy: {wine_type_accuracy}')\n",
    "\n",
    "# EXPECTED VALUES\n",
    "# ~ 0.30 - 0.38\n",
    "# ~ 0.30 - 0.38\n",
    "# ~ 0.018 - 0.030\n",
    "# ~ 0.50 - 0.62\n",
    "# ~ 0.97 - 1.0\n",
    "\n",
    "# Example:\n",
    "#0.3657050132751465\n",
    "#0.3463745415210724\n",
    "#0.019330406561493874\n",
    "#0.5885359048843384\n",
    "#0.9974651336669922"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "gPtTGAP4usnm"
   },
   "source": [
    "## Analyze the Model Performance\n",
    "\n",
    "Note that the model has two outputs. The output at index 0 is quality and index 1 is wine type\n",
    "\n",
    "So, round the quality predictions to the nearest integer."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 146,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "tBq9PEeAaW-Y"
   },
   "outputs": [],
   "source": [
    "predictions = model.predict(norm_test_X)\n",
    "quality_pred = predictions[0]\n",
    "type_pred = predictions[1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 147,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "YLhgTR4xTIxj"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[5.6965857]\n"
     ]
    }
   ],
   "source": [
    "print(quality_pred[0])\n",
    "\n",
    "# EXPECTED OUTPUT\n",
    "# 5.6 - 6.0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 148,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "MPi-eYfGTUXi"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[7.0181086e-05]\n",
      "[0.999985]\n"
     ]
    }
   ],
   "source": [
    "print(type_pred[0])\n",
    "print(type_pred[944])\n",
    "\n",
    "# EXPECTED OUTPUT\n",
    "# A number close to zero\n",
    "# A number close to or equal to 1"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "Kohk-9C6vt_s"
   },
   "source": [
    "### Plot Utilities\n",
    "\n",
    "We define a few utilities to visualize the model performance."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 149,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "62gEOFUhn6aQ"
   },
   "outputs": [],
   "source": [
    "def plot_metrics(metric_name, title, ylim=5):\n",
    "    plt.title(title)\n",
    "    plt.ylim(0,ylim)\n",
    "    plt.plot(history.history[metric_name],color='blue',label=metric_name)\n",
    "    plt.plot(history.history['val_' + metric_name],color='green',label='val_' + metric_name)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 150,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "6rfgSx7uz5dj"
   },
   "outputs": [],
   "source": [
    "def plot_confusion_matrix(y_true, y_pred, title='', labels=[0,1]):\n",
    "    cm = confusion_matrix(y_true, y_pred)\n",
    "    fig = plt.figure()\n",
    "    ax = fig.add_subplot(111)\n",
    "    cax = ax.matshow(cm)\n",
    "    plt.title('Confusion matrix of the classifier')\n",
    "    fig.colorbar(cax)\n",
    "    ax.set_xticklabels([''] + labels)\n",
    "    ax.set_yticklabels([''] + labels)\n",
    "    plt.xlabel('Predicted')\n",
    "    plt.ylabel('True')\n",
    "    fmt = 'd'\n",
    "    thresh = cm.max() / 2.\n",
    "    for i, j in itertools.product(range(cm.shape[0]), range(cm.shape[1])):\n",
    "          plt.text(j, i, format(cm[i, j], fmt),\n",
    "                  horizontalalignment=\"center\",\n",
    "                  color=\"black\" if cm[i, j] > thresh else \"white\")\n",
    "    plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 151,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "dfVLIqi017Vf"
   },
   "outputs": [],
   "source": [
    "def plot_diff(y_true, y_pred, title = '' ):\n",
    "    plt.scatter(y_true, y_pred)\n",
    "    plt.title(title)\n",
    "    plt.xlabel('True Values')\n",
    "    plt.ylabel('Predictions')\n",
    "    plt.axis('equal')\n",
    "    plt.axis('square')\n",
    "    plt.plot([-100, 100], [-100, 100])\n",
    "    return plt"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "8sd1jdFbwE0I"
   },
   "source": [
    "### Plots for Metrics"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 152,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "f3MwZ5J1pOfj"
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plot_metrics('wine_quality_root_mean_squared_error', 'RMSE', ylim=2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 153,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "QIAxEezCppnd"
   },
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAYAAAAEICAYAAABWJCMKAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4yLjEsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy+j8jraAAAgAElEQVR4nO3de5xdZX3v8c9v77lfM5nMJNPcwQRIFAME8MKlFcGAl4CWHqgXVFqMR0pp4XWati89nNNjj1rRqsdDxJpTaNWIBSTUKCKigAImIJeEGAghhJBJMkkmc7/P7/zxrJ3sbPbM7J2ZzJ7Z832/Xuu11n7W7dmLsL/zPOtm7o6IiEw9sVxXQEREckMBICIyRSkARESmKAWAiMgUpQAQEZmiFAAiIlOUAkAmNTM738y25boeIpORAkAmFDP7WzPbkFL20hBlV7n7o+5+yhjXYZ6ZtScNbmYdSZ/PH8v9DVGHW8zs30/0fmRqK8h1BURSPAKsNrO4uw+Y2SygEDgzpexN0bJjzt13ARWJz2bmwFvdffuJ2J9IrqgFIBPNRsIP/rLo8wXAw8C2lLKX3X2Pmf2hme1OrGxmO83sZjN7zsxazOwHZlaSNP99ZvaMmR02s9+Y2emZVszMZplZp5nVJpWdZWZNZlZoZh83s1+b2Teiff/ezC5KWrbazL5jZo1m9rqZ/S8zi2d7gMzsA2a2JfoOvzSz05Lm/U207TYz25bYv5mdY2abzKzVzPaZ2Vey3a/kHwWATCju3gs8SfiRJxo/CjyWUjbcX/9/AqwAFgKnAx8HMLMzgbXAp4Ba4FvAejMrzrBue4FfRttP+Aiwzt37os/nAjuAGcB/B+4xs+nRvDuAfkLr5QzgEuDPMtl3gpktBr4P3AjUARuA+82syMxOAa4Hznb3SuA9wM5o1a8BX3P3KuBk4K5s9iv5SQEgE9GvOPpjfz4hAB5NKfvVMOt/3d33uPsh4H6Othz+HPiWuz/p7gPufgfQA7wti7rdQfjRJ/rr/Wrg35Lm7wf+2d373P0HhJbLe81sJnApcKO7d7j7fuCrwFVZ7BvgvwA/dvcHo9D5MlAKvAMYAIqBJWZW6O473f3laL0+4E1mNsPd2939iSz3K3lIASAT0SPAeWZWA9S5+0vAb4B3RGVvZvgWwN6k6U6O9ufPB26Kuk4Om9lhYC7wB1nU7T7CD+xJwMVAi7v/Nmn+637sExZfjbY/n9C11Zi0728B9Vnsm2hbryY+uPsg8BowOzpHcSNwC7DfzNaZWeK7XQssBn5vZhvN7H1Z7lfykAJAJqLHgWrgOuDXAO7eCuyJyva4+yvHsd3XgM+7+7Skoczdv5/pBty9m9B98mHgoxz71z/AbDOzpM/zonq/RmhtzEjad5W7L83yO+whhAkA0b7mAq9H9fueu58XLePAF6Pyl9z9akLgfBH4DzMrz3LfkmcUADLhuHsXsAn4a0LXT8JjUdnxXv3zbWCVmZ1rQbmZvdfMKrPczp2E8wofAFIv1awHbohOCl8JnAZscPdG4GfArWZWZWYxMzvZzC4cZj8xMytJGooJ4fNeM7vIzAqBmwjB8hszO8XM3hUt1w10EbqFMLOPmFld1GI4HG1/IMvvLXlGASAT1a8IP6aPJZU9GpUdVwC4+ybCeYD/AzQD24lOEGe5nV8Dg8DT7r4zZfaTwCLgAPB54I/d/WA072NAEfBCtP//ABqG2dXVhB/xxPCyu28jnIP4RrSP9wPvj06eFwNfiMr3Eo7V30XbWgFsMbN2wgnhq6LWjExhphfCiGTPzH4BfM/d/yWp7OPAn0VdMCITnm4EE8mSmZ0NnAmszHVdREYjoy4gM1sR3VSy3cxWp5n/4ejGm+eim2veOtK6ZjbdzB60cEv/g9HVHSITmpndAfyccDlnW67rIzIaI3YBRdc6v0i45G034U7Nq939haRl3gFsdfdmM7sUuMXdzx1uXTP7EnDI3b8QBUONu//NCfiOIiKSRiYtgHOA7e6+IzrRtI6Upq+7/8bdm6OPTwBzMlh3JeGmGqLx5cf/NUREJFuZnAOYTbiGOWE34Xb3oVwL/CSDdWdGl8bh7o1mlvaGGDO7jnDtN+Xl5WedeuqpGVT5+LT2tPLSwZeIHTqVM96sS6RFJD889dRTB9y9LrU8kwCwNGVp+43M7I8IAZC4CiLjdYfi7rcDtwMsX77cN23alM3qWXn01Ue54F8vwL77DTZtevcJ24+IyHgys1fTlWfSBbSbcKdhwhzC3YipOzgd+BdgZdJ1z8Otu8/MGqJ1GwjPUMmp8qLwV/9ArJP+/hxXRkTkBMskADYCi8xsoZkVER5etT55ATObB9wDfNTdX8xw3fXANdH0NYRnrORUWWFZmCjsoKsrt3URETnRRuwCcvd+M7seeACIA2vdfYuZrYrmrwE+R3i87v+NHoPS7+7Lh1o32vQXgLvM7FpgF3DlGH+3rJUXRv3+hZ10dUFltg8IEBGZRDK6EczdNxCeO55ctiZp+s8Y4rnm6daNyg8CF71xjdw50gIo6qCzM7d1ERE50fQsoCSJcwCJFoCISD5TACQpjhdjmM4BiMiUoABIYmaUxMqhsFNdQCKS9xQAKUriZVCkFoCI5D8FQIqywnIo1ElgEcl/CoAUpQVlOgksIlOCAiBFeVG5uoBEZEpQAKQoLyrTSWARmRIUACkqi8t1GaiITAkKgBSVJWoBiMjUoABIUVGscwAiMjUoAFKUF5ZjRboKSETynwIgRVlhGa77AERkClAApCgvLIeCbjq6BnJdFRGRE0oBkCLxSOj2bvUBiUh+UwCkSDwSur2nI8c1ERE5sRQAKRItgI4+nQQQkfymAEiReC1kR69aACKS3zIKADNbYWbbzGy7ma1OM/9UM3vczHrM7Oak8lPM7JmkodXMbozm3WJmryfNu2zsvtbxS7QAOtUCEJE8N+I7gc0sDnwTuBjYDWw0s/Xu/kLSYoeAG4DLk9d1923AsqTtvA7cm7TIV939y6P6BmMscQ6go08tABHJb5m0AM4Btrv7DnfvBdYBK5MXcPf97r4R6BtmOxcBL7v7q8dd23GgFoCITBWZBMBs4LWkz7ujsmxdBXw/pex6M3vOzNaaWc1xbHPMJc4BdPWrBSAi+S2TALA0ZZ7NTsysCPgA8MOk4tuAkwldRI3ArUOse52ZbTKzTU1NTdns9rgkWgD91knfcO0ZEZFJLpMA2A3MTfo8B9iT5X4uBZ52932JAnff5+4D7j4IfJvQ1fQG7n67uy939+V1dXVZ7jZ7iXMAFHbQ3n7CdycikjOZBMBGYJGZLYz+kr8KWJ/lfq4mpfvHzBqSPl4BbM5ymydEogVAUQdtbbmti4jIiTTiVUDu3m9m1wMPAHFgrbtvMbNV0fw1ZjYL2ARUAYPRpZ5L3L3VzMoIVxB9KmXTXzKzZYTupJ1p5ufEkQAo7FQAiEheGzEAANx9A7AhpWxN0vReQtdQunU7gdo05R/NqqbjJGYxiqyEXnUBiUie053AaZQWlKsFICJ5TwGQRmlBeCuYWgAiks8UAGmUFZapBSAieU8BkEZFUTkU6iogEclvCoA0KkpCC0BdQCKSzxQAaVQVl+s+ABHJewqANMqLyomVtKsFICJ5TQGQRlVxFRS3qgUgInlNAZBGdXG1AkBE8p4CII2q4ioGC9toax/MdVVERE4YBUAaVcVVABzu1EkAEclfCoA0EgHQ2tOa45qIiJw4CoA0qkuqAWjtbclxTUREThwFQBqJFkB7n1oAIpK/FABpJAKgc0ABICL5SwGQRiIAeryVQV0IJCJ5SgGQRnVxOAdASQsdHbmti4jIiaIASCPRAtDNYCKSzxQAaVQUVYQJBYCI5LGMAsDMVpjZNjPbbmar08w/1cweN7MeM7s5Zd5OM3vezJ4xs01J5dPN7EEzeyka14z+64yNeCxOSawCilv1QDgRyVsjBoCZxYFvApcCS4CrzWxJymKHgBuALw+xmT9y92XuvjypbDXwkLsvAh6KPk8YFQXVUNyiFoCI5K1MWgDnANvdfYe79wLrgJXJC7j7fnffCPRlse+VwB3R9B3A5Vmse8JVFlWpBSAieS2TAJgNvJb0eXdUlikHfmZmT5nZdUnlM929ESAa16db2cyuM7NNZrapqakpi92OTiIA1AIQkXyVSQBYmjLPYh/vdPczCV1InzGzC7JYF3e/3d2Xu/vyurq6bFYdlWmlCgARyW+ZBMBuYG7S5znAnkx34O57ovF+4F5ClxLAPjNrAIjG+zPd5nioKauGkhZ1AYlI3sokADYCi8xsoZkVAVcB6zPZuJmVm1llYhq4BNgczV4PXBNNXwPcl03FT7TpZWoBiEh+KxhpAXfvN7PrgQeAOLDW3beY2apo/hozmwVsAqqAQTO7kXDF0AzgXjNL7Ot77v7TaNNfAO4ys2uBXcCVY/vVRqe6JARAix4IKiJ5asQAAHD3DcCGlLI1SdN7CV1DqVqBtw6xzYPARRnXdJyF9wK3cahxEN0vJyL5SL9sQ0i8E2D/YZ0EEJH8pAAYQuJ5QAfb1QckIvlJATCEIwHQoXcCiEh+UgAMIREALV0KABHJTwqAISTeCdCiF8OLSJ5SAAwh0QLoi7XQ3Z3jyoiInAAKgCEkvxSmuTm3dREROREUAENIDoBDh3JbFxGRE0EBMITK4sowUdyiFoCI5CUFwBBiFqOyYBqUNqsFICJ5SQEwjJrSWig7oBaAiOQlBcAwZpTVQulBtQBEJC8pAIYxs3IGlB1UC0BE8pICYBgzymqJVRxQC0BE8pICYBi1pbV4qVoAIpKfFADDqC2rxQvbOXC4J9dVEREZcwqAYcwomwFAU/vBHNdERGTsKQCGUVtaC8ChLgWAiOSfjALAzFaY2TYz225mq9PMP9XMHjezHjO7Oal8rpk9bGZbzWyLmf1l0rxbzOx1M3smGi4bm680dmrLQgA09yoARCT/jPhOYDOLA98ELgZ2AxvNbL27v5C02CHgBuDylNX7gZvc/WkzqwSeMrMHk9b9qrt/edTf4gRJdAG19x/EHcK77UVE8kMmLYBzgO3uvsPde4F1wMrkBdx9v7tvBPpSyhvd/eloug3YCswek5qPg0QX0GDJAdraclwZEZExlkkAzAZeS/q8m+P4ETezBcAZwJNJxdeb2XNmttbMaoZY7zoz22Rmm5qamrLd7agkuoB0M5iI5KNMAiBdx4dnsxMzqwDuBm5098Qrtm4DTgaWAY3ArenWdffb3X25uy+vq6vLZrejVlJQQrGV6XEQIpKXMgmA3cDcpM9zgD2Z7sDMCgk//t9193sS5e6+z90H3H0Q+Dahq2nCmVY0A8oOcOBArmsiIjK2MgmAjcAiM1toZkXAVcD6TDZuZgZ8B9jq7l9JmdeQ9PEKYHNmVR5ftWW1UHaQ/ftzXRMRkbE14lVA7t5vZtcDDwBxYK27bzGzVdH8NWY2C9gEVAGDZnYjsAQ4Hfgo8LyZPRNt8u/cfQPwJTNbRuhO2gl8amy/2tioqwhPBFUAiEi+GTEAAKIf7A0pZWuSpvcSuoZSPUb6cwi4+0czr2buNFTNgPKdCgARyTu6E3gEtWW1WNlB9u3LdU1ERMaWAmAEtaW1ePFh9u7vz3VVRETGlAJgBDPKZoA5jYd1I4CI5BcFwAgSN4Ptb9PzgEQkvygARpB4HtCBziY8q9vfREQmNgXACGZVzAKgt2gv7e05royIyBhSAIygoSK6X62yUZeCikheUQCMoLaslrgVQIUCQETyiwJgBDGLUVs8Eyr26l4AEckrCoAMzKpoUBeQiOQdBUAG5k5rUBeQiOQdBUAGZlc1YFUKABHJLwqADMyqmIWXHqBxX9/IC4uITBIKgAw0VDaAOa8fVhNARPKHAiADiXsB9nY05rgmIiJjRwGQgYbKEABN3QoAEckfCoAMJB4H0e576ezMcWVERMaIAiADiQCgspHXXsttXURExkpGAWBmK8xsm5ltN7PVaeafamaPm1mPmd2cybpmNt3MHjSzl6Jxzei/zolRFC+iurAWKhrZtSvXtRERGRsjBoCZxYFvApcSXvR+tZktSVnsEHAD8OUs1l0NPOTui4CHos8T1qzycDewAkBE8kUmLYBzgO3uvsPde4F1wMrkBdx9v7tvBFIvlB9u3ZXAHdH0HcDlx/kdxsXcmnA3sLqARCRfZBIAs4Hkn73dUVkmhlt3prs3AkTj+nQbMLPrzGyTmW1qamrKcLdjr6FyFvFpagGISP7IJAAsTVmm78YazbphYffb3X25uy+vq6vLZtUxNbdqLgNle9i5Sy+HF5H8kEkA7AbmJn2eA+zJcPvDrbvPzBoAovGEvs12Yc1CiA2w85D6gEQkP2QSABuBRWa20MyKgKuA9Rluf7h11wPXRNPXAPdlXu3xd1LNSQDs7nxF7wYWkbxQMNIC7t5vZtcDDwBxYK27bzGzVdH8NWY2C9gEVAGDZnYjsMTdW9OtG236C8BdZnYtsAu4cqy/3FhaOG0hAH1lr3DgAOSwN0pEZEyMGAAA7r4B2JBStiZpei+heyejdaPyg8BF2VQ2l+ZWzyVGnMGaV9i1SwEgIpOf7gTOUEGsgIayeVCzQ5eCikheUABk4aSahTDtFV0KKiJ5QQGQhUX1C6FGASAi+UEBkIWTa06Cin38fkdHrqsiIjJqCoAsJK4Eeu7VnbmtiIjIGFAAZGFhTQiA19pfoUONABGZ5BQAWUi0AKjZwdatua2LiMhoKQCyUF9eT2m8DKa9wubNua6NiMjoKACyYGYsnrGIWP02BYCITHoKgCwtrV9KvGGLAkBEJj0FQJaW1i2lr2wXz21ry3VVRERGRQGQpaV1SwFo7HuB5uYcV0ZEZBQUAFlaWh8CgPotbNky/LIiIhOZAiBLC6ctpDheAvWbdR5ARCY1BUCW4rE4S+pO04lgEZn0FADHYWn9UuKzFAAiMrkpAI7D0rql9Ja8znMvHtbrIUVk0lIAHIfElUDNBS+wb1+OKyMicpwyCgAzW2Fm28xsu5mtTjPfzOzr0fznzOzMqPwUM3smaWiN3heMmd1iZq8nzbtsbL/aiXNGwxlh4g82qhtIRCatEQPAzOLAN4FLgSXA1Wa2JGWxS4FF0XAdcBuAu29z92Xuvgw4C+gE7k1a76uJ+dG7gyeFOVVzmFs5H+Y/qgAQkUkrkxbAOcB2d9/h7r3AOmBlyjIrgTs9eAKYZmYNKctcBLzs7q+OutYTwB8uvABb8AjPb9ZJABGZnDIJgNlA8mvQd0dl2S5zFfD9lLLroy6jtWZWk27nZnadmW0ys01NTU0ZVHd8nD/vfLysiU2vvJjrqoiIHJdMAsDSlKX+2TvsMmZWBHwA+GHS/NuAk4FlQCNwa7qdu/vt7r7c3ZfX1dVlUN3xccH8CwD4fdcjDA7muDIiIschkwDYDcxN+jwH2JPlMpcCT7v7kWtm3H2fuw+4+yDwbUJX06SxuHYxVfF6emc9yrPP5ro2IiLZyyQANgKLzGxh9Jf8VcD6lGXWAx+LrgZ6G9Di7o1J868mpfsn5RzBFcCkOp1qZpw373yY/wg//3muayMikr0RA8Dd+4HrgQeArcBd7r7FzFaZ2aposQ3ADmA74a/5/5pY38zKgIuBe1I2/SUze97MngP+CPir0X6Z8bbilAth2qusf3RHrqsiIpK1gkwWii7R3JBStiZp2oHPDLFuJ1CbpvyjWdV0Arrk5EsAePLAA/T0fJri4hxXSEQkC7oTeBQW1y6mvmgBffMf4PHHc10bEZHsKABGwcx47ynvgYW/4IGf9+W6OiIiWVEAjNL7T3sPFLdx95NqAojI5KIAGKV3LXwXMeK85D/ltddGXl5EZKJQAIxSdUk1Z9W9Exb/J/fdl+vaiIhkTgEwBv70zCtg5vN89yfbc10VEZGMKQDGwBWnXgHAk633cOhQjisjIpIhBcAYmD9tPqdVL8dPvZv77891bUREMqMAGCMfOeuDMOe3fOeHOhMsIpODAmCM/PGSDwHwWMv32JP6qDwRkQlIATBGFtcu5m0z34Wf+zXu/G5PrqsjIjIiBcAY+p8Xr4bKRr756L/nuioiIiNSAIyhd5/0buYWnMnu+V/ikccGcl0dEZFhKQDGkJnxv1b8Dcx4kc9840e5ro6IyLAUAGPsw2d8iBmxk9lc/UUeflgvjBeRiUsBMMbisTj//d3/DWZv5C//+WFcGSAiE5QC4AT4s7M/RqXN5Plp/6jXRYrIhKUAOAFKCkr43LtWw0kP8Rdf+6laASIyIWUUAGa2wsy2mdl2M1udZr6Z2dej+c+Z2ZlJ83ZG7/59xsw2JZVPN7MHzeylaFwzNl9pYrjh7f+V+vib2Db/Zn60vj/X1REReYMRA8DM4sA3gUuBJcDVZrYkZbFLgUXRcB1wW8r8P3L3Ze6+PKlsNfCQuy8CHoo+542ieBHfWPlFqN/Cx75+G7t25bpGIiLHyqQFcA6w3d13uHsvsA5YmbLMSuBOD54ApplZwwjbXQncEU3fAVyeRb0nhSvffAXnzXoP7W//b6y45jm6u3NdIxGRozIJgNlA8hPOdkdlmS7jwM/M7Ckzuy5pmZnu3ggQjevT7dzMrjOzTWa2qampKYPqThxmxt0fuZOa0hq2vvlKbvq7llxXSUTkiEwCwNKUpZ7WHG6Zd7r7mYRuos+Y2QVZ1A93v93dl7v78rq6umxWnRDqy+u598PfJ1a7g//b8l42/Lw911USEQEyC4DdwNykz3OA1OddDrmMuyfG+4F7CV1KAPsS3UTReH+2lZ8sLlxwIXeuXAdznuDyu97Phgc7c10lEZGMAmAjsMjMFppZEXAVsD5lmfXAx6Krgd4GtLh7o5mVm1klgJmVA5cAm5PWuSaavgbI6zfqfviMD/FP7/g3+v7gV7z3ziv45/+jEwIiklsFIy3g7v1mdj3wABAH1rr7FjNbFc1fA2wALgO2A53AJ6LVZwL3mlliX99z959G874A3GVm1wK7gCvH7FtNUDe/52oqp/Ww6qef4K+fuJJ3vP1uzjmrKNfVEpEpynwS3aW0fPly37Rp08gLTnC3/upb3PzLVVTu/iC7v7qOqorCXFdJRPKYmT2Vchk+oDuBc+KmCz/Fqvlfo23OPcz77MW8uGdvrqskIlOQAiBHbvv4Dayq/3dayn/L0m+cwbd+pcdHi8j4UgDk0G2f/jBrznqSwbaZrPrlFZz39SvZ267WgIiMDwVAjn3qirew5S83MmvzP/LrpvtZ8E9L+OJDa+gf1PODROTEUgBMAKcuKuSVf/tbPtnzLD27Tmf1Y5+mevUy/uEnazjc1cJDD8GBA7mupYjkG10FNMFs3er8jx/ew380/Q8GZjxPQd80+n/xWc6Nr+LXvywjHs91DUVkstFVQJPEaacZ6z73Ibbe8CwLHnwSXj8X3nMTT/7hdE79/CXc+eyddPbpTmIRGT21ACaw3t4wPHXgEa77ynpetPtg+nZKCko4Z/Y5nDf3PC6YfwEXLriQkoKSXFdXRCaooVoACoBJorkZPvFJ575nfkXx6eupfstjHCh8mkEGqC6uZuWpK1lx8grefdK7qSuffA/NE5ETRwGQJ554Ar7xDbjnHuge6ID5j9Bw8V20/cF9tA80A7Bs1jIWTFtAfVk9b5vzNs6efTYLpi2goqgix7UXkVxQAOSZtjZ49ll45JEQCHv3DVB92tPUnv0zWqY/TMmMfXTGX6e5u/nIOjPKZrBg2oIwVIdxbVktZYVlnFxzMotrF1MY12MpRPKNAiCPdXfDj38cWgU7d0JTE7z0EixaPEjDW7ZSu/R53nLeTvb17GTn4aNDz0DPMdspiBWwuHYxJ9ecTENFA7MqZqUdSgtLc/NFReS4KACmkMFBuOsuWLs2hMGzz0JNDVRXQ2Mj/MVfwLIzBrnpc/s47czD/MMX29nZ+iJbmrawpWkLrx5+lcb2Rpo6mvA3vPsHqourjwmEiqIKCmOFnFZ3Gm+pfwvTS6dTFC+if7CfquIq6srrKCssy8GREBFQAExpv/sd/OM/QiwGZvCDH4TyN70Jtm+Hyy+HW2+FBQvCMgn9g/00dTSxt33vkaGxvfENn7v6uujq7+JQ16Eh61BWWMacqjksrVuKmdHa08r00unMLJ/JrIpZzCyfycyKmcwsn0l9eT01pTVUFlUSPUpcREZBASBH/OY3sHUrXHMN3HYb3HBDKK+shLe8BebOhbIyuPBC+OAHQ/lwenrg//0/uOC9e2js28rh7sP0D/YTsxgtPS00dTTR1NnEzsM72XpgKzGLUVVcxaGuQ+xr30dLT/p3JccsxrSSadSU1IRxac2R6eriaiqLK6ksqqSkoIT+wX5KC0upLa1leul0asuicWktxQXF9A/209HbQVVxlUJFphwFgAzpuefgySfD+NlnYd8+OHwY9u+HwkJYvBje/OYwLF0axiedBPE4uMNHPgLf+x78yZ8cbV1ko7u/m/0d+9nbvpd97fto6myiuauZ5u5mDncfprm7+cjnxLi1p5Xu/szeqlZaUEpXf9eR6fryesoKy5hZMZN51fOYVzWP6pJqDncfprq4mlNnnMr00ulUFFVQUVRBaWEpxfFiSgpKKC4opiA24nuURCYUBYBkxR0efxzuvx82b4YtW+CVV47OLymB006DadPg4Yfh7LNh40b40Y9g5crR7be5GaZPH3nZ/sF+2nvb6e7vpiBWQGdfJ4e6DnGw82AYdx3kYOdBmrubj/yYN7Y10tTZRGdfJ3vb97KrZRevt73OoA8SsxiDPjjifmMWozheTHFBcdpxzEI/Wn15PdNLp3O4+zAFsQIaKhqoKKqgpKAk46G0sJTSgtJjxgogyZYCQEatvT10HSUCYfNm+P3v4Y//OJxjOPts2LEDli2D+fOPDvPmHZ0uG+ZcsDtcey18//vw29+G7qjx0D/YT2dfJ5VFlRzuPsyLB1+kpaeFjt4O2nrb6Orromegh57+njeMu/u7w3RS+aAP4u7s69hHc1cz00qm0T/Yz972vXT0dWTcchlKQazgDaEw6IP0DfRRVlhGPBanpbuFmMWoLqmmqriK6uIwLi8spyhedMxQUlBCZXElFUUVVBZVHulaqyyuJGYx+gb66BvsY9AHKYwVUtMqt4kAAA39SURBVBgvpChedGQ6XVkiBGViGFUAmNkK4GuEdwL/i7t/IWW+RfMvI7wT+OPu/rSZzQXuBGYBg8Dt7v61aJ1bgD8HmqLN/J27bxiuHgqAie3FF+F//+/QUnj1Vdi9G/pTnmo9Y8ax4ZAcEr/8Jdx0ExQUwOmnh5veCvPwtgR3p3egl+7+brr6u+ju7047dPV1HVkmcaL9DeNoOh6LUxAroKuvi77BPqqLq3Gclu4WWntaae1ppaWnhc6+TnoHeukb6KN3oPcNlwKPleJ4MeVF5ZQXlhOzGP2D/Qz4AP2D/fQP9lNZVMmCaQvSXh1WECugKF5EcUExhbHC8N2sgHgsTtzC90xMJ8YxixGzGGZ2ZDrdYAw/P2Yx4rGwvcR2kz8XxYsoLSylpKAEw9jfsZ8BH6CmpIaCWAGO4+7ELBYCMV5IQayA7v5uOno76OzrPHJ+LLnOBbECCmOFR9ZJV+e51XOP+2bO4w4AM4sDLwIXA7uBjcDV7v5C0jKXAX9BCIBzga+5+7lm1gA0RGFQCTwFXO7uL0QB0O7uX870SygAJpeBAdizJ4TBUENX17HrvO994eT0lVeGrqS3vz2clJ43L4zLy0MX0dy5oRsqW/394flKw7VEphJ3p2egh/bedtp62mjrbTtmPOiDR/7KT/yQ9w70hhAZ7DvSOkiESmK6q6+Ljr4OOvo6GPTBIz/gBbEC4hanpaeFV1tepaf/2ABynIHBAXoGeo7sZ2Bw4Eh4pJse9MEjQz77yYd/woo3rTiudYcKgEw6E88Btrv7jmhD64CVwAtJy6wE7vSQJk+Y2TQza3D3RqARwN3bzGwrMDtlXclT8Xj4oZ47F847743z3eHgwaNh0NoaupMqKuCv/gr+9V/hvvvSb7usDC66KJyMnjULZs48dlxX98bWQ3MzXHwx7N0Ljz0WLnud6szsyPmGGWUzcl2dUXP30AWHHxMMyUNimdQhOUwGBgeOlCVPH2m59XUx4APMLJ9JPBanuauZAR/AMMzsSJdc70Av/YP9lBSUUF5UTllhWWgppNShf7D/mCBNrb+789aZbx3z45VJAMwGXkv6vJvwV/5Iy8wm+vEHMLMFwBnAk0nLXW9mHwM2ATe5ezMyZZiFLqEZM+Css46d95WvhKGtDV57LQy7dkFnZ7ihbeNGeOih0G3U1pZ++zNmHA2Ek08O5xVeeAFKS+GSS8KNcvPmhflFRSf868o4MDPippdmZCqTAEh30XRqv9Gwy5hZBXA3cKO7t0bFtwH/EC33D8CtwCffsHOz64DrAObNm5dBdSWfVFbCkiVhSPbxjx+d7uwMl67u2xf+uk8dNzbC3XdDXx/ce28IkIsvhvPPP7qN2trQapgx49jxUNOlehqG5IFMAmA3MDfp8xxgT6bLmFkh4cf/u+5+T2IBd9+XmDazbwP/mW7n7n47cDuEcwAZ1FemmLIyWLgwDMMZGODIG9Veeinc97BnTxgaG8NrNxPPUfrNb8LngYGh9zl9egiO6dPD5bCJobo6jBNhUV8fyoqLw1BefnznL7K1dy/8+Z/DZz8L55xz4vcnk08mAbARWGRmC4HXgauAP01ZZj2hO2cdoXuoxd0bo6uDvgNsdfevJK+QdI4A4Apg8yi+h8iIkl+nOXt2GIYzOAgtLSEUmpqOBkRi+tChMBw8GELj8OEwtLePXJe5c8PVT9XVUFV1dKiuDsFRUhLOkbiH1sZb3xoe3ZHpVVHu8OlPw3/+J7z8MjzzjLq55I1GDAB37zez64EHCJeBrnX3LWa2Kpq/BthAuAJoO+Ey0E9Eq78T+CjwvJk9E5UlLvf8kpktI3QB7QQ+NWbfSmQMxGLhIXo1NeFu6Ez194fgOHAg3E3d1BROcPf0hKGlBbZtC5fJNjaG6ba2sEzqVVGpKipC66Km5ug43fRrr4Wb8i6/PIw//3m4+eawvp6EIQm6EUxkAunpCcHR23v0h7q1NTzQb9eu0MJobg5D6nRr67Hbevvb4dFH4U//NDwdFkKoVVcf7aZKna6qCvdhFBUd28U1fXoIl8rKECJFRQqSyWQ0l4GKyDgpLk7fNXX66SOvm2h5JLqi3vzm0O21di1cemkIlsT85PHOnUc/t7aG7qORFBSEMCgrC8unBkYiWBJDonsreSgvD91Tu3bB8uXhSq3UUBkYgF/8IoTP8jf8fMloKQBE8kRBQfgBrq09try8/NirpkbiHloizc3h/EbiXEdzczi/0dZ2dNzZGdZJLH/oULino6UlDN1ZPPWivDwERUXF0ZbGK6+E7iwI95KcfnpYprIyDMnTiXVKSkKQlpSE+cXFmddhqOMB+dniUQCIyDHMwo9nQ0MYRqO392gYJA+trWGYPx/mzAn3aLz44rHh0t4eTn7fems4X/Ltb8O6dWFeX1/mdSguPtoCqawMnwsLw5Do7po5M1yxdfBgaEnNmxfWaWsLT7ptbIQbbwx3qJeWHjuUlAwfDoODcOed4Um7n/1sZg86HC86ByAik05PTwiQtrZjh/b2MK+7O5xQb2s7GjiJcW9vCJC+vvBj39MT7hlpagpXYMVi4Qc/8dN43nmh/Ec/Gro+JSVvDIbEsH9/eGgihED95CePhlA8HupRWhrOw/zoR+G8zYc+FM7d1NUdPT8zmhP4ehqoiEiG+vqgoyP84FZXh7ItW8Kd5F1d2Q0Aq1bBKaeE+zJ+97uhz7PU14cbFH/84zd2n91/f3hW1vHQSWARkQwVFoa/vJMtXRqG0XjqqTAeGAgtkYGBsK/OztBSWLgwdEkdPBiWTXSZJU7qjzUFgIjIOIvHj32cSHFxuNIpobY2PK/qRNNbG0REpigFgIjIFKUAEBGZohQAIiJTlAJARGSKUgCIiExRCgARkSlKASAiMkUpAEREpigFgIjIFKUAEBGZohQAIiJTVEYBYGYrzGybmW03s9Vp5puZfT2a/5yZnTnSumY23cweNLOXonFN6nZFROTEGTEAzCwOfBO4FFgCXG1mS1IWuxRYFA3XAbdlsO5q4CF3XwQ8FH0WEZFxkkkL4Bxgu7vvcPdeYB2wMmWZlcCdHjwBTDOzhhHWXQncEU3fAVw+yu8iIiJZyOR9ALOB15I+7wbOzWCZ2SOsO9PdGwHcvdHM6tPt3MyuI7QqANrNbFsGdU5nBnDgONcdb5OlrpOlnjB56jpZ6gmTp66TpZ5w4uo6P11hJgGQ7i2UqS80G2qZTNYdlrvfDtyezTrpmNmmdK9Em4gmS10nSz1h8tR1stQTJk9dJ0s9YfzrmkkX0G5gbtLnOcCeDJcZbt19UTcR0Xh/5tUWEZHRyiQANgKLzGyhmRUBVwHrU5ZZD3wsuhrobUBL1L0z3LrrgWui6WuA+0b5XUREJAsjdgG5e7+ZXQ88AMSBte6+xcxWRfPXABuAy4DtQCfwieHWjTb9BeAuM7sW2AVcOabf7I1G3Y00jiZLXSdLPWHy1HWy1BMmT10nSz1hnOtq7ll1yYuISJ7QncAiIlOUAkBEZIqaEgEw0qMscsXM5prZw2a21cy2mNlfRuW3mNnrZvZMNFyW67oCmNlOM3s+qtOmqGxCPdLDzE5JOm7PmFmrmd04UY6pma01s/1mtjmpbMhjaGZ/G/273WZm78lxPf/JzH4fPe7lXjObFpUvMLOupGO7ZrzqOUxdh/zvPcGO6Q+S6rjTzJ6JysfnmLp7Xg+Ek88vAycBRcCzwJJc1yuqWwNwZjRdCbxIeGTGLcDNua5fmvruBGaklH0JWB1Nrwa+mOt6pvy330u4CWZCHFPgAuBMYPNIxzD6t/AsUAwsjP4dx3NYz0uAgmj6i0n1XJC83AQ5pmn/e0+0Y5oy/1bgc+N5TKdCCyCTR1nkhLs3uvvT0XQbsJVw9/RkMpEf6XER8LK7v5rriiS4+yPAoZTioY7hSmCdu/e4+yuEq+zOyVU93f1n7t4ffXyCcF9Pzg1xTIcyoY5pgpkZ8CfA98ejLglTIQCGekzFhGJmC4AzgCejouujpvbaXHerJHHgZ2b2VPSIDkh5pAeQ9pEeOXIVx/4PNRGPKQx9DCfyv91PAj9J+rzQzH5nZr8ys/NzVakU6f57T9Rjej6wz91fSio74cd0KgTAqB9HcaKZWQVwN3Cju7cSnqZ6MrAMaCQ0DSeCd7r7mYSnu37GzC7IdYWGEt14+AHgh1HRRD2mw5mQ/3bN7O+BfuC7UVEjMM/dzwD+GviemVXlqn6Rof57T8hjClzNsX+sjMsxnQoBkMmjLHLGzAoJP/7fdfd7ANx9n7sPuPsg8G3GqYk6EnffE433A/cS6jVRH+lxKfC0u++DiXtMI0Mdwwn3b9fMrgHeB3zYo87qqDvlYDT9FKFffXHuajnsf++JeEwLgA8CP0iUjdcxnQoBkMmjLHIi6vf7DrDV3b+SVN6QtNgVwObUdcebmZWbWWVimnBCcDMT95Eex/xFNRGPaZKhjuF64CozKzazhYT3bfw2B/UDwtV0wN8AH3D3zqTyOgvv/sDMTiLUc0duanmkTkP9955QxzTybuD37r47UTBux3Q8zn7neiA8puJFQor+fa7rk1Sv8wjNz+eAZ6LhMuDfgOej8vVAwwSo60mEqyeeBbYkjiNQS3ihz0vRePoEqGsZcBCoTiqbEMeUEEqNQB/hr9FrhzuGwN9H/263AZfmuJ7bCf3niX+ra6JlPxT9m3gWeBp4/wQ4pkP+955IxzQq/1dgVcqy43JM9SgIEZEpaip0AYmISBoKABGRKUoBICIyRSkARESmKAWAiMgUpQAQEZmiFAAiIlPU/weAdR2HyhIPlgAAAABJRU5ErkJggg==\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plot_metrics('wine_type_loss', 'Wine Type Loss', ylim=0.2)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "uYV9AOAMwI9p"
   },
   "source": [
    "### Plots for Confusion Matrix\n",
    "\n",
    "Plot the confusion matrices for wine type. You can see that the model performs well for prediction of wine type from the confusion matrix and the loss metrics."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 154,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "C3hvTYxIaf3n"
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plot_confusion_matrix(test_Y[1], np.round(type_pred), title='Wine Type', labels = [0, 1])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 155,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "GW91ym8P2I5y"
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "scatter_plot = plot_diff(test_Y[0], quality_pred, title='Type')"
   ]
  }
 ],
 "metadata": {
  "colab": {
   "include_colab_link": true,
   "name": "exercise-answer.ipynb",
   "provenance": []
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
